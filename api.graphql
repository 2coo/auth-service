### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AccessTokenOAuthClientIdCompoundUniqueInput {
  accessToken: String!
  oAuthClientId: String!
}

input CodeOAuthClientIdCompoundUniqueInput {
  code: String!
  oAuthClientId: String!
}

scalar DateTime

input EmailCreateManyWithoutProfileInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutProfileInput!]
  create: [EmailCreateWithoutProfileInput!]
}

input EmailCreateOrConnectWithoutProfileInput {
  create: EmailCreateWithoutProfileInput!
  where: EmailWhereUniqueInput!
}

input EmailCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  emailType: EmailTypeCreateOneWithoutEmailsInput!
  id: String
  updatedAt: DateTime
}

input EmailTypeCreateOneWithoutEmailsInput {
  connect: EmailTypeWhereUniqueInput
  connectOrCreate: EmailTypeCreateOrConnectWithoutEmailInput
  create: EmailTypeCreateWithoutEmailsInput
}

input EmailTypeCreateOrConnectWithoutEmailInput {
  create: EmailTypeCreateWithoutEmailsInput!
  where: EmailTypeWhereUniqueInput!
}

input EmailTypeCreateWithoutEmailsInput {
  createdAt: DateTime
  id: String
  type: String!
  updatedAt: DateTime
}

input EmailTypeWhereUniqueInput {
  id: String
}

input EmailWhereUniqueInput {
  id: String
}

"""Gender of users"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

""""""
enum GrantType {
  AUTHORIZATION_CODE
  CLIENT_CREDENTIALS
  EXTENSION
  PASSWORD
  REFRESH_TOKEN
}

type Group {
  createdAt: DateTime!
  description: String
  name: String!
  updatedAt: DateTime!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input GroupCreateManyWithoutUsersInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutUserInput!]
  create: [GroupCreateWithoutUsersInput!]
}

input GroupCreateOrConnectWithoutUserInput {
  create: GroupCreateWithoutUsersInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateWithoutUsersInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input GroupWhereUniqueInput {
  id: String
}

type Mutation {
  createOneoAuthClient(data: oAuthClientCreateInput!): oAuthClient!
  createOneUser(data: UserCreateInput!): User!
}

type oAuthAccessToken {
  accessToken: String!
  client: oAuthClient!
  createdAt: DateTime!
  expirationDate: DateTime!
  scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  user: User
}

input oAuthAccessTokenCreateManyWithoutClientInput {
  connect: [oAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [oAuthAccessTokenCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthAccessTokenCreateWithoutClientInput!]
}

input oAuthAccessTokenCreateManyWithoutScopesInput {
  connect: [oAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [oAuthAccessTokenCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthAccessTokenCreateWithoutScopesInput!]
}

input oAuthAccessTokenCreateManyWithoutUserInput {
  connect: [oAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [oAuthAccessTokenCreateOrConnectWithoutUserInput!]
  create: [oAuthAccessTokenCreateWithoutUserInput!]
}

input oAuthAccessTokenCreateOrConnectWithoutoAuthClientInput {
  create: oAuthAccessTokenCreateWithoutClientInput!
  where: oAuthAccessTokenWhereUniqueInput!
}

input oAuthAccessTokenCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthAccessTokenCreateWithoutScopesInput!
  where: oAuthAccessTokenWhereUniqueInput!
}

input oAuthAccessTokenCreateOrConnectWithoutUserInput {
  create: oAuthAccessTokenCreateWithoutUserInput!
  where: oAuthAccessTokenWhereUniqueInput!
}

input oAuthAccessTokenCreateWithoutClientInput {
  accessToken: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  scopes: oAuthScopeCreateManyWithoutAccessTokensInput
  updatedAt: DateTime
  user: UserCreateOneWithoutOAuthAccessTokenInput
}

input oAuthAccessTokenCreateWithoutScopesInput {
  accessToken: String
  client: oAuthClientCreateOneWithoutAccessTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  updatedAt: DateTime
  user: UserCreateOneWithoutOAuthAccessTokenInput
}

input oAuthAccessTokenCreateWithoutUserInput {
  accessToken: String
  client: oAuthClientCreateOneWithoutAccessTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  scopes: oAuthScopeCreateManyWithoutAccessTokensInput
  updatedAt: DateTime
}

input oAuthAccessTokenWhereUniqueInput {
  accessToken_oAuthClientId: AccessTokenOAuthClientIdCompoundUniqueInput
  id: String
  userId_oAuthClientId: UserIdOAuthClientIdCompoundUniqueInput
}

type oAuthAuthorizationCode {
  client: oAuthClient!
  code: String!
  createdAt: DateTime!
  expirationDate: DateTime!
  redirectURI: String!
  scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  user: User!
}

input oAuthAuthorizationCodeCreateManyWithoutClientInput {
  connect: [oAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [oAuthAuthorizationCodeCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthAuthorizationCodeCreateWithoutClientInput!]
}

input oAuthAuthorizationCodeCreateManyWithoutScopesInput {
  connect: [oAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [oAuthAuthorizationCodeCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthAuthorizationCodeCreateWithoutScopesInput!]
}

input oAuthAuthorizationCodeCreateManyWithoutUserInput {
  connect: [oAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [oAuthAuthorizationCodeCreateOrConnectWithoutUserInput!]
  create: [oAuthAuthorizationCodeCreateWithoutUserInput!]
}

input oAuthAuthorizationCodeCreateOrConnectWithoutoAuthClientInput {
  create: oAuthAuthorizationCodeCreateWithoutClientInput!
  where: oAuthAuthorizationCodeWhereUniqueInput!
}

input oAuthAuthorizationCodeCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthAuthorizationCodeCreateWithoutScopesInput!
  where: oAuthAuthorizationCodeWhereUniqueInput!
}

input oAuthAuthorizationCodeCreateOrConnectWithoutUserInput {
  create: oAuthAuthorizationCodeCreateWithoutUserInput!
  where: oAuthAuthorizationCodeWhereUniqueInput!
}

input oAuthAuthorizationCodeCreateWithoutClientInput {
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
  scopes: oAuthScopeCreateManyWithoutAuthorizationCodesInput
  updatedAt: DateTime
  user: UserCreateOneWithoutOAuthAuthorizationCodeInput!
}

input oAuthAuthorizationCodeCreateWithoutScopesInput {
  client: oAuthClientCreateOneWithoutAuthorizationCodesInput!
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutOAuthAuthorizationCodeInput!
}

input oAuthAuthorizationCodeCreateWithoutUserInput {
  client: oAuthClientCreateOneWithoutAuthorizationCodesInput!
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
  scopes: oAuthScopeCreateManyWithoutAuthorizationCodesInput
  updatedAt: DateTime
}

input oAuthAuthorizationCodeWhereUniqueInput {
  code_oAuthClientId: CodeOAuthClientIdCompoundUniqueInput
  id: String
}

type oAuthClient {
  accessTokenLifetime: Int!
  accessTokens(after: oAuthAccessTokenWhereUniqueInput, before: oAuthAccessTokenWhereUniqueInput, first: Int, last: Int): [oAuthAccessToken!]!
  authorizationCodes(after: oAuthAuthorizationCodeWhereUniqueInput, before: oAuthAuthorizationCodeWhereUniqueInput, first: Int, last: Int): [oAuthAuthorizationCode!]!
  createdAt: DateTime!
  grants(after: oAuthGrantWhereUniqueInput, before: oAuthGrantWhereUniqueInput, first: Int, last: Int): [oAuthGrant!]!
  id: String!
  idTokenLifetime: Int!
  isTrusted: Boolean!
  javascriptOrigins(after: oAuthJavascriptOriginWhereUniqueInput, before: oAuthJavascriptOriginWhereUniqueInput, first: Int, last: Int): [oAuthJavascriptOrigin!]!
  name: String!
  redirectUris(after: oAuthRedirectURIWhereUniqueInput, before: oAuthRedirectURIWhereUniqueInput, first: Int, last: Int): [oAuthRedirectURI!]!
  refreshTokenLifetime: Int!
  refreshTokens(after: oAuthRefreshTokenWhereUniqueInput, before: oAuthRefreshTokenWhereUniqueInput, first: Int, last: Int): [oAuthRefreshToken!]!
  scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  updatedAt: DateTime!
}

input oAuthClientCreateInput {
  accessTokenLifetime: Int
  accessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  javascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  name: String!
  redirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  refreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  users: UserCreateManyWithoutOAuthClientInput
}

input oAuthClientCreateManyWithoutScopesInput {
  connect: [oAuthClientWhereUniqueInput!]
  connectOrCreate: [oAuthClientCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthClientCreateWithoutScopesInput!]
}

input oAuthClientCreateOneWithoutAccessTokensInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutoAuthAccessTokenInput
  create: oAuthClientCreateWithoutAccessTokensInput
}

input oAuthClientCreateOneWithoutAuthorizationCodesInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutoAuthAuthorizationCodeInput
  create: oAuthClientCreateWithoutAuthorizationCodesInput
}

input oAuthClientCreateOneWithoutRefreshTokensInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutoAuthRefreshTokenInput
  create: oAuthClientCreateWithoutRefreshTokensInput
}

input oAuthClientCreateOneWithoutUsersInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutUserInput
  create: oAuthClientCreateWithoutUsersInput
}

input oAuthClientCreateOrConnectWithoutoAuthAccessTokenInput {
  create: oAuthClientCreateWithoutAccessTokensInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutoAuthAuthorizationCodeInput {
  create: oAuthClientCreateWithoutAuthorizationCodesInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutoAuthRefreshTokenInput {
  create: oAuthClientCreateWithoutRefreshTokensInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthClientCreateWithoutScopesInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutUserInput {
  create: oAuthClientCreateWithoutUsersInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateWithoutAccessTokensInput {
  accessTokenLifetime: Int
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  javascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  name: String!
  redirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  refreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  users: UserCreateManyWithoutOAuthClientInput
}

input oAuthClientCreateWithoutAuthorizationCodesInput {
  accessTokenLifetime: Int
  accessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  createdAt: DateTime
  grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  javascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  name: String!
  redirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  refreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  users: UserCreateManyWithoutOAuthClientInput
}

input oAuthClientCreateWithoutRefreshTokensInput {
  accessTokenLifetime: Int
  accessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  javascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  name: String!
  redirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  users: UserCreateManyWithoutOAuthClientInput
}

input oAuthClientCreateWithoutScopesInput {
  accessTokenLifetime: Int
  accessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  javascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  name: String!
  redirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  refreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  secret: String
  updatedAt: DateTime
  users: UserCreateManyWithoutOAuthClientInput
}

input oAuthClientCreateWithoutUsersInput {
  accessTokenLifetime: Int
  accessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  javascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  name: String!
  redirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  refreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
}

input oAuthClientWhereUniqueInput {
  id: String
  name: String
}

type oAuthCustomScope {
  createdAt: DateTime!
  description: String
  name: String!
  resourceServer: oAuthResourceServer!
  updatedAt: DateTime!
}

input oAuthCustomScopeWhereUniqueInput {
  id: String
}

type oAuthGrant {
  createdAt: DateTime!
  grantType: GrantType!
}

input oAuthGrantCreateManyWithoutClientsInput {
  connect: [oAuthGrantWhereUniqueInput!]
  connectOrCreate: [oAuthGrantCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthGrantCreateWithoutClientsInput!]
}

input oAuthGrantCreateOrConnectWithoutoAuthClientInput {
  create: oAuthGrantCreateWithoutClientsInput!
  where: oAuthGrantWhereUniqueInput!
}

input oAuthGrantCreateWithoutClientsInput {
  createdAt: DateTime
  grantType: GrantType!
  id: String
  updatedAt: DateTime
}

input oAuthGrantWhereUniqueInput {
  id: String
}

type oAuthJavascriptOrigin {
  createdAt: DateTime!
  uri: String!
}

input oAuthJavascriptOriginCreateManyWithoutClientInput {
  connect: [oAuthJavascriptOriginWhereUniqueInput!]
  connectOrCreate: [oAuthJavascriptOriginCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthJavascriptOriginCreateWithoutClientInput!]
}

input oAuthJavascriptOriginCreateOrConnectWithoutoAuthClientInput {
  create: oAuthJavascriptOriginCreateWithoutClientInput!
  where: oAuthJavascriptOriginWhereUniqueInput!
}

input oAuthJavascriptOriginCreateWithoutClientInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  uri: String!
}

input oAuthJavascriptOriginWhereUniqueInput {
  id: String
}

type oAuthRedirectURI {
  createdAt: DateTime!
  url: String!
}

input oAuthRedirectURICreateManyWithoutClientInput {
  connect: [oAuthRedirectURIWhereUniqueInput!]
  connectOrCreate: [oAuthRedirectURICreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthRedirectURICreateWithoutClientInput!]
}

input oAuthRedirectURICreateOrConnectWithoutoAuthClientInput {
  create: oAuthRedirectURICreateWithoutClientInput!
  where: oAuthRedirectURIWhereUniqueInput!
}

input oAuthRedirectURICreateWithoutClientInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  url: String!
}

input oAuthRedirectURIWhereUniqueInput {
  id: String
}

type oAuthRefreshToken {
  createdAt: DateTime!
  expirationDate: DateTime!
  refreshToken: String!
}

input oAuthRefreshTokenCreateManyWithoutClientInput {
  connect: [oAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [oAuthRefreshTokenCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthRefreshTokenCreateWithoutClientInput!]
}

input oAuthRefreshTokenCreateManyWithoutScopesInput {
  connect: [oAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [oAuthRefreshTokenCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthRefreshTokenCreateWithoutScopesInput!]
}

input oAuthRefreshTokenCreateManyWithoutUserInput {
  connect: [oAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [oAuthRefreshTokenCreateOrConnectWithoutUserInput!]
  create: [oAuthRefreshTokenCreateWithoutUserInput!]
}

input oAuthRefreshTokenCreateOrConnectWithoutoAuthClientInput {
  create: oAuthRefreshTokenCreateWithoutClientInput!
  where: oAuthRefreshTokenWhereUniqueInput!
}

input oAuthRefreshTokenCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthRefreshTokenCreateWithoutScopesInput!
  where: oAuthRefreshTokenWhereUniqueInput!
}

input oAuthRefreshTokenCreateOrConnectWithoutUserInput {
  create: oAuthRefreshTokenCreateWithoutUserInput!
  where: oAuthRefreshTokenWhereUniqueInput!
}

input oAuthRefreshTokenCreateWithoutClientInput {
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String
  scopes: oAuthScopeCreateManyWithoutRefreshTokenScopeInput
  updatedAt: DateTime
  user: UserCreateOneWithoutOAuthRefreshTokenInput
}

input oAuthRefreshTokenCreateWithoutScopesInput {
  client: oAuthClientCreateOneWithoutRefreshTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String
  updatedAt: DateTime
  user: UserCreateOneWithoutOAuthRefreshTokenInput
}

input oAuthRefreshTokenCreateWithoutUserInput {
  client: oAuthClientCreateOneWithoutRefreshTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String
  scopes: oAuthScopeCreateManyWithoutRefreshTokenScopeInput
  updatedAt: DateTime
}

input oAuthRefreshTokenWhereUniqueInput {
  id: String
  refreshToken_oAuthClientId: RefreshTokenOAuthClientIdCompoundUniqueInput
  userId_oAuthClientId: UserIdOAuthClientIdCompoundUniqueInput
}

type oAuthResourceServer {
  createdAt: DateTime!
  identifier: String!
  name: String!
  scopes(after: oAuthCustomScopeWhereUniqueInput, before: oAuthCustomScopeWhereUniqueInput, first: Int, last: Int): [oAuthCustomScope!]!
}

type oAuthScope {
  description: String
  name: String!
}

input oAuthScopeCreateManyWithoutAccessTokensInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthAccessTokenInput!]
  create: [oAuthScopeCreateWithoutAccessTokensInput!]
}

input oAuthScopeCreateManyWithoutAuthorizationCodesInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthAuthorizationCodeInput!]
  create: [oAuthScopeCreateWithoutAuthorizationCodesInput!]
}

input oAuthScopeCreateManyWithoutClientsInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthScopeCreateWithoutClientsInput!]
}

input oAuthScopeCreateManyWithoutRefreshTokenScopeInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthRefreshTokenInput!]
  create: [oAuthScopeCreateWithoutRefreshTokenScopeInput!]
}

input oAuthScopeCreateOrConnectWithoutoAuthAccessTokenInput {
  create: oAuthScopeCreateWithoutAccessTokensInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateOrConnectWithoutoAuthAuthorizationCodeInput {
  create: oAuthScopeCreateWithoutAuthorizationCodesInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateOrConnectWithoutoAuthClientInput {
  create: oAuthScopeCreateWithoutClientsInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateOrConnectWithoutoAuthRefreshTokenInput {
  create: oAuthScopeCreateWithoutRefreshTokenScopeInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateWithoutAccessTokensInput {
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutScopesInput
  clients: oAuthClientCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  refreshTokenScope: oAuthRefreshTokenCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeCreateWithoutAuthorizationCodesInput {
  accessTokens: oAuthAccessTokenCreateManyWithoutScopesInput
  clients: oAuthClientCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  refreshTokenScope: oAuthRefreshTokenCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeCreateWithoutClientsInput {
  accessTokens: oAuthAccessTokenCreateManyWithoutScopesInput
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  refreshTokenScope: oAuthRefreshTokenCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeCreateWithoutRefreshTokenScopeInput {
  accessTokens: oAuthAccessTokenCreateManyWithoutScopesInput
  authorizationCodes: oAuthAuthorizationCodeCreateManyWithoutScopesInput
  clients: oAuthClientCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input oAuthScopeWhereUniqueInput {
  id: String
}

input PasswordResetCreateManyWithoutUserInput {
  connect: [PasswordResetWhereUniqueInput!]
  connectOrCreate: [PasswordResetCreateOrConnectWithoutUserInput!]
  create: [PasswordResetCreateWithoutUserInput!]
}

input PasswordResetCreateOrConnectWithoutUserInput {
  create: PasswordResetCreateWithoutUserInput!
  where: PasswordResetWhereUniqueInput!
}

input PasswordResetCreateWithoutUserInput {
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  token: String!
  updatedAt: DateTime
}

input PasswordResetWhereUniqueInput {
  id: String
}

type Photo {
  profile: Profile!
}

input PhotoCreateManyWithoutProfileInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  create: [PhotoCreateWithoutProfileInput!]
}

input PhotoCreateOneWithoutCurrentPhotoOfInput {
  connect: PhotoWhereUniqueInput
  connectOrCreate: PhotoCreateOrConnectWithoutProfileInput
  create: PhotoCreateWithoutCurrentPhotoOfInput
}

input PhotoCreateOrConnectWithoutProfileInput {
  create: PhotoCreateWithoutCurrentPhotoOfInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateWithoutCurrentPhotoOfInput {
  createdAt: DateTime
  id: String
  profile: ProfileCreateOneWithoutPhotosInput!
  profileId: String!
  updatedAt: DateTime
  value: String!
}

input PhotoCreateWithoutProfileInput {
  createdAt: DateTime
  currentPhotoOf: ProfileCreateOneWithoutCurrentProfileImageInput!
  id: String
  profileId: String!
  updatedAt: DateTime
  value: String!
}

input PhotoWhereUniqueInput {
  id: String
}

type Profile {
  birthdate: DateTime
  createdAt: DateTime!
  currentProfileImage: Photo!
  displayName: String
  firstName: String
  gender: Gender
  lastName: String
  mobileNumber: String
  photos(after: PhotoWhereUniqueInput, before: PhotoWhereUniqueInput, first: Int, last: Int): [Photo!]!
  updatedAt: DateTime!
  user: User!
}

input ProfileCreateOneWithoutCurrentProfileImageInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotoInput
  create: ProfileCreateWithoutCurrentProfileImageInput
}

input ProfileCreateOneWithoutPhotosInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotoInput
  create: ProfileCreateWithoutPhotosInput
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutPhotoInput {
  create: ProfileCreateWithoutCurrentProfileImageInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutCurrentProfileImageInput {
  birthdate: DateTime
  createdAt: DateTime
  displayName: String
  emails: EmailCreateManyWithoutProfileInput
  firstName: String
  gender: Gender
  id: String
  lastName: String
  mobileNumber: String
  photos: PhotoCreateManyWithoutProfileInput
  updatedAt: DateTime
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateWithoutPhotosInput {
  birthdate: DateTime
  createdAt: DateTime
  currentProfileImage: PhotoCreateOneWithoutCurrentPhotoOfInput
  displayName: String
  emails: EmailCreateManyWithoutProfileInput
  firstName: String
  gender: Gender
  id: String
  lastName: String
  mobileNumber: String
  updatedAt: DateTime
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateWithoutUserInput {
  birthdate: DateTime
  createdAt: DateTime
  currentProfileImage: PhotoCreateOneWithoutCurrentPhotoOfInput
  displayName: String
  emails: EmailCreateManyWithoutProfileInput
  firstName: String
  gender: Gender
  id: String
  lastName: String
  mobileNumber: String
  photos: PhotoCreateManyWithoutProfileInput
  updatedAt: DateTime
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  oAuthAccessToken(where: oAuthAccessTokenWhereUniqueInput!): oAuthAccessToken
  oAuthAuthorizationCode(where: oAuthAuthorizationCodeWhereUniqueInput!): oAuthAuthorizationCode
  oAuthClient(where: oAuthClientWhereUniqueInput!): oAuthClient
  oAuthClients(after: oAuthClientWhereUniqueInput, before: oAuthClientWhereUniqueInput, first: Int, last: Int): [oAuthClient!]!
  oAuthGrants(after: oAuthGrantWhereUniqueInput, before: oAuthGrantWhereUniqueInput, first: Int, last: Int): [oAuthGrant!]!
  oAuthRefreshToken(where: oAuthRefreshTokenWhereUniqueInput!): oAuthRefreshToken
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input RefreshTokenOAuthClientIdCompoundUniqueInput {
  oAuthClientId: String!
  refreshToken: String!
}

"""Roles of oauth system"""
enum SystemRole {
  ADMIN
  DEVELOPER
  SUPER_ADMIN
  USER
}

type User {
  createdAt: DateTime!
  email: String!
  groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  profile: Profile!
  role: SystemRole!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  createdAt: DateTime
  devices: UserDeviceCreateManyWithoutUserInput
  email: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  oAuthAccessToken: oAuthAccessTokenCreateManyWithoutUserInput
  oAuthAuthorizationCode: oAuthAuthorizationCodeCreateManyWithoutUserInput
  oAuthClient: oAuthClientCreateOneWithoutUsersInput
  oAuthRefreshToken: oAuthRefreshTokenCreateManyWithoutUserInput
  password: String!
  passwordResets: PasswordResetCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutUserInput
  role: SystemRole
  sub: String
  updatedAt: DateTime
  username: String!
}

input UserCreateManyWithoutOAuthClientInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutoAuthClientInput!]
  create: [UserCreateWithoutOAuthClientInput!]
}

input UserCreateOneWithoutOAuthAccessTokenInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutoAuthAccessTokenInput
  create: UserCreateWithoutOAuthAccessTokenInput
}

input UserCreateOneWithoutOAuthAuthorizationCodeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutoAuthAuthorizationCodeInput
  create: UserCreateWithoutOAuthAuthorizationCodeInput
}

input UserCreateOneWithoutOAuthRefreshTokenInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutoAuthRefreshTokenInput
  create: UserCreateWithoutOAuthRefreshTokenInput
}

input UserCreateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserCreateWithoutProfileInput
}

input UserCreateOrConnectWithoutoAuthAccessTokenInput {
  create: UserCreateWithoutOAuthAccessTokenInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutoAuthAuthorizationCodeInput {
  create: UserCreateWithoutOAuthAuthorizationCodeInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutoAuthClientInput {
  create: UserCreateWithoutOAuthClientInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutoAuthRefreshTokenInput {
  create: UserCreateWithoutOAuthRefreshTokenInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutOAuthAccessTokenInput {
  createdAt: DateTime
  devices: UserDeviceCreateManyWithoutUserInput
  email: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  oAuthAuthorizationCode: oAuthAuthorizationCodeCreateManyWithoutUserInput
  oAuthClient: oAuthClientCreateOneWithoutUsersInput
  oAuthRefreshToken: oAuthRefreshTokenCreateManyWithoutUserInput
  password: String!
  passwordResets: PasswordResetCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutUserInput
  role: SystemRole
  sub: String
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutOAuthAuthorizationCodeInput {
  createdAt: DateTime
  devices: UserDeviceCreateManyWithoutUserInput
  email: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  oAuthAccessToken: oAuthAccessTokenCreateManyWithoutUserInput
  oAuthClient: oAuthClientCreateOneWithoutUsersInput
  oAuthRefreshToken: oAuthRefreshTokenCreateManyWithoutUserInput
  password: String!
  passwordResets: PasswordResetCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutUserInput
  role: SystemRole
  sub: String
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutOAuthClientInput {
  createdAt: DateTime
  devices: UserDeviceCreateManyWithoutUserInput
  email: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  oAuthAccessToken: oAuthAccessTokenCreateManyWithoutUserInput
  oAuthAuthorizationCode: oAuthAuthorizationCodeCreateManyWithoutUserInput
  oAuthRefreshToken: oAuthRefreshTokenCreateManyWithoutUserInput
  password: String!
  passwordResets: PasswordResetCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutUserInput
  role: SystemRole
  sub: String
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutOAuthRefreshTokenInput {
  createdAt: DateTime
  devices: UserDeviceCreateManyWithoutUserInput
  email: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  oAuthAccessToken: oAuthAccessTokenCreateManyWithoutUserInput
  oAuthAuthorizationCode: oAuthAuthorizationCodeCreateManyWithoutUserInput
  oAuthClient: oAuthClientCreateOneWithoutUsersInput
  password: String!
  passwordResets: PasswordResetCreateManyWithoutUserInput
  profile: ProfileCreateOneWithoutUserInput
  role: SystemRole
  sub: String
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutProfileInput {
  createdAt: DateTime
  devices: UserDeviceCreateManyWithoutUserInput
  email: String!
  groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  oAuthAccessToken: oAuthAccessTokenCreateManyWithoutUserInput
  oAuthAuthorizationCode: oAuthAuthorizationCodeCreateManyWithoutUserInput
  oAuthClient: oAuthClientCreateOneWithoutUsersInput
  oAuthRefreshToken: oAuthRefreshTokenCreateManyWithoutUserInput
  password: String!
  passwordResets: PasswordResetCreateManyWithoutUserInput
  role: SystemRole
  sub: String
  updatedAt: DateTime
  username: String!
}

type UserDevice {
  user: User!
}

input UserDeviceCreateManyWithoutUserInput {
  connect: [UserDeviceWhereUniqueInput!]
  connectOrCreate: [UserDeviceCreateOrConnectWithoutUserInput!]
  create: [UserDeviceCreateWithoutUserInput!]
}

input UserDeviceCreateOrConnectWithoutUserInput {
  create: UserDeviceCreateWithoutUserInput!
  where: UserDeviceWhereUniqueInput!
}

input UserDeviceCreateWithoutUserInput {
  createdAt: DateTime
  deviceKey: String!
  id: String
  isRemembered: Boolean
  lastIP: String!
  lastSeen: DateTime!
  name: String
  SDK: String
  updatedAt: DateTime
}

input UserDeviceWhereUniqueInput {
  id: String
}

input UserIdOAuthClientIdCompoundUniqueInput {
  oAuthClientId: String!
  userId: String!
}

input UserWhereUniqueInput {
  id: String
  sub: String
  username: String
}
