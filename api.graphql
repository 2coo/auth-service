### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Account status of users"""
enum AccountStatusType {
  ARCHIVED
  COMPROMISED
  CONFIRMED
  DISABLED
  FORCE_CHANGE_PASSWORD
  RESET_REQUIRED
  UNCONFIRMED
  UNKNOWN
}

type AuthPayload {
  token: String!
  user: SystemUser!
}

scalar DateTime

"""Gender of users"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

""""""
enum GrantType {
  AUTHORIZATION_CODE
  CLIENT_CREDENTIALS
  EXTENSION
  PASSWORD
  REFRESH_TOKEN
}

type Group {
  createdAt: DateTime!
  description: String
  name: String!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  updatedAt: DateTime!
  Users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input GroupWhereUniqueInput {
  id: String
  identifier: String
  name: String
}

type Identity {
  createdAt: DateTime!
  isUserCreatedBefore: Boolean!
  provider: String!
  status: IdentityStatus!
  sub: String!
  updatedAt: DateTime!
  User: User!
}

enum IdentityStatus {
  DISABLED
  VERIFIED
}

input IdentityWhereUniqueInput {
  id: String
  sub: String
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
}

type oAuthAccessToken {
  Client: oAuthClient!
  createdAt: DateTime!
  expirationDate: DateTime!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  User: User
}

input oAuthAccessTokenWhereUniqueInput {
  id: String
  jti: String
}

type oAuthAuthorizationCode {
  Client: oAuthClient!
  code: String!
  createdAt: DateTime!
  expirationDate: DateTime!
  redirectURI: String!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  User: User!
}

input oAuthAuthorizationCodeWhereUniqueInput {
  code: String
  id: String
}

type oAuthClient {
  accessTokenLifetime: Int!
  AccessTokens(after: oAuthAccessTokenWhereUniqueInput, before: oAuthAccessTokenWhereUniqueInput, first: Int, last: Int): [oAuthAccessToken!]!
  AuthorizationCodes(after: oAuthAuthorizationCodeWhereUniqueInput, before: oAuthAuthorizationCodeWhereUniqueInput, first: Int, last: Int): [oAuthAuthorizationCode!]!
  createdAt: DateTime!
  EnabledScopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  Grants(after: oAuthGrantWhereUniqueInput, before: oAuthGrantWhereUniqueInput, first: Int, last: Int): [oAuthGrant!]!
  id: String!
  idTokenLifetime: Int!
  JavascriptOrigins(after: oAuthJavascriptOriginWhereUniqueInput, before: oAuthJavascriptOriginWhereUniqueInput, first: Int, last: Int): [oAuthJavascriptOrigin!]!
  name: String!
  RedirectUris(after: oAuthRedirectURIWhereUniqueInput, before: oAuthRedirectURIWhereUniqueInput, first: Int, last: Int): [oAuthRedirectURI!]!
  refreshTokenLifetime: Int!
  RefreshTokens(after: oAuthRefreshTokenWhereUniqueInput, before: oAuthRefreshTokenWhereUniqueInput, first: Int, last: Int): [oAuthRefreshToken!]!
  secret: String!
  trustedClient: Boolean!
  updatedAt: DateTime!
}

type oAuthGrant {
  createdAt: DateTime!
  grantType: GrantType!
}

input oAuthGrantWhereUniqueInput {
  id: String
}

type oAuthJavascriptOrigin {
  createdAt: DateTime!
  uri: String!
}

input oAuthJavascriptOriginWhereUniqueInput {
  id: String
}

type oAuthRedirectURI {
  createdAt: DateTime!
  url: String!
}

input oAuthRedirectURIWhereUniqueInput {
  id: String
}

type oAuthRefreshToken {
  createdAt: DateTime!
  expirationDate: DateTime!
  refreshToken: String!
}

input oAuthRefreshTokenWhereUniqueInput {
  id: String
  refreshToken: String
}

type oAuthResourceServer {
  createdAt: DateTime!
  identifier: String!
  name: String!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
}

type oAuthScope {
  description: String
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  name: String!
}

input oAuthScopeWhereUniqueInput {
  id: String
  name: String
}

type Photo {
  Profile: Profile!
}

input PhotoWhereUniqueInput {
  id: String
}

type Profile {
  birthdate: DateTime
  createdAt: DateTime!
  displayName: String
  firstName: String
  gender: Gender
  lastName: String
  mobileNumber: String
  Photos(after: PhotoWhereUniqueInput, before: PhotoWhereUniqueInput, first: Int, last: Int): [Photo!]!
  updatedAt: DateTime!
  User: User!
}

type Query {
  me: SystemUser
}

enum SystemRole {
  ADMIN
  AUDITOR
  MANAGER
  SUPER_ADMIN
}

type SystemUser {
  createdAt: DateTime!
  email: String!
  id: String!
  SystemRole: SystemRole!
  updatedAt: DateTime!
  username: String!
}

type User {
  accountStatusType: AccountStatusType!
  createdAt: DateTime!
  Devices(after: UserDeviceWhereUniqueInput, before: UserDeviceWhereUniqueInput, first: Int, last: Int): [UserDevice!]!
  email: String!
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  Identities(after: IdentityWhereUniqueInput, before: IdentityWhereUniqueInput, first: Int, last: Int): [Identity!]!
  Profile: Profile
  updatedAt: DateTime!
  username: String!
}

type UserDevice {
  User: User!
}

input UserDeviceWhereUniqueInput {
  id: String
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
