### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AccessTokenOAuthClientIdCompoundUniqueInput {
  accessToken: String!
  oAuthClientId: String!
}

type AuthPayload {
  token: String
  user: User
}

input CodeOAuthClientIdCompoundUniqueInput {
  code: String!
  oAuthClientId: String!
}

scalar DateTime

type Email {
  createdAt: DateTime!
  email: String!
  isVerified: Boolean!
  Profile: Profile!
  updatedAt: DateTime!
}

input EmailCreateManyWithoutProfileInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutProfileInput!]
  create: [EmailCreateWithoutProfileInput!]
}

input EmailCreateOrConnectWithoutProfileInput {
  create: EmailCreateWithoutProfileInput!
  where: EmailWhereUniqueInput!
}

input EmailCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  id: String
  isPrimary: Boolean
  isVerified: Boolean
  updatedAt: DateTime
  userId: String!
}

input EmailWhereUniqueInput {
  id: String
}

"""Gender of users"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

""""""
enum GrantType {
  AUTHORIZATION_CODE
  CLIENT_CREDENTIALS
  EXTENSION
  PASSWORD
  REFRESH_TOKEN
}

type Group {
  createdAt: DateTime!
  description: String
  name: String!
  updatedAt: DateTime!
  Users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input GroupCreateManyWithoutRolesInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutRoleInput!]
  create: [GroupCreateWithoutRolesInput!]
}

input GroupCreateManyWithoutUserPoolInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutUserPoolInput!]
  create: [GroupCreateWithoutUserPoolInput!]
}

input GroupCreateManyWithoutUsersInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutUserInput!]
  create: [GroupCreateWithoutUsersInput!]
}

input GroupCreateOrConnectWithoutRoleInput {
  create: GroupCreateWithoutRolesInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateOrConnectWithoutUserInput {
  create: GroupCreateWithoutUsersInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateOrConnectWithoutUserPoolInput {
  create: GroupCreateWithoutUserPoolInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateWithoutRolesInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutGroupsInput!
  Users: UserCreateManyWithoutGroupsInput
}

input GroupCreateWithoutUserPoolInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  Roles: RoleCreateManyWithoutGroupsInput
  updatedAt: DateTime
  Users: UserCreateManyWithoutGroupsInput
}

input GroupCreateWithoutUsersInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  Roles: RoleCreateManyWithoutGroupsInput
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutGroupsInput!
}

input GroupWhereUniqueInput {
  id: String
}

type Mutation {
  createOneoAuthClient(data: oAuthClientCreateInput!): oAuthClient!
  createOneUser(data: UserCreateInput!): User!
}

type oAuthAccessToken {
  accessToken: String!
  Client: oAuthClient!
  createdAt: DateTime!
  expirationDate: DateTime!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  User: User
}

input oAuthAccessTokenCreateManyWithoutClientInput {
  connect: [oAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [oAuthAccessTokenCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthAccessTokenCreateWithoutClientInput!]
}

input oAuthAccessTokenCreateManyWithoutScopesInput {
  connect: [oAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [oAuthAccessTokenCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthAccessTokenCreateWithoutScopesInput!]
}

input oAuthAccessTokenCreateManyWithoutUserInput {
  connect: [oAuthAccessTokenWhereUniqueInput!]
  connectOrCreate: [oAuthAccessTokenCreateOrConnectWithoutUserInput!]
  create: [oAuthAccessTokenCreateWithoutUserInput!]
}

input oAuthAccessTokenCreateOrConnectWithoutoAuthClientInput {
  create: oAuthAccessTokenCreateWithoutClientInput!
  where: oAuthAccessTokenWhereUniqueInput!
}

input oAuthAccessTokenCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthAccessTokenCreateWithoutScopesInput!
  where: oAuthAccessTokenWhereUniqueInput!
}

input oAuthAccessTokenCreateOrConnectWithoutUserInput {
  create: oAuthAccessTokenCreateWithoutUserInput!
  where: oAuthAccessTokenWhereUniqueInput!
}

input oAuthAccessTokenCreateWithoutClientInput {
  accessToken: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  Scopes: oAuthScopeCreateManyWithoutAccessTokensInput
  updatedAt: DateTime
  User: UserCreateOneWithoutAccessTokensInput
}

input oAuthAccessTokenCreateWithoutScopesInput {
  accessToken: String
  Client: oAuthClientCreateOneWithoutAccessTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  updatedAt: DateTime
  User: UserCreateOneWithoutAccessTokensInput
}

input oAuthAccessTokenCreateWithoutUserInput {
  accessToken: String
  Client: oAuthClientCreateOneWithoutAccessTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  Scopes: oAuthScopeCreateManyWithoutAccessTokensInput
  updatedAt: DateTime
}

input oAuthAccessTokenWhereUniqueInput {
  accessToken_oAuthClientId: AccessTokenOAuthClientIdCompoundUniqueInput
  id: String
  userId_oAuthClientId: UserIdOAuthClientIdCompoundUniqueInput
}

type oAuthAuthorizationCode {
  Client: oAuthClient!
  code: String!
  createdAt: DateTime!
  expirationDate: DateTime!
  redirectURI: String!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  User: User!
}

input oAuthAuthorizationCodeCreateManyWithoutClientInput {
  connect: [oAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [oAuthAuthorizationCodeCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthAuthorizationCodeCreateWithoutClientInput!]
}

input oAuthAuthorizationCodeCreateManyWithoutScopesInput {
  connect: [oAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [oAuthAuthorizationCodeCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthAuthorizationCodeCreateWithoutScopesInput!]
}

input oAuthAuthorizationCodeCreateManyWithoutUserInput {
  connect: [oAuthAuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [oAuthAuthorizationCodeCreateOrConnectWithoutUserInput!]
  create: [oAuthAuthorizationCodeCreateWithoutUserInput!]
}

input oAuthAuthorizationCodeCreateOrConnectWithoutoAuthClientInput {
  create: oAuthAuthorizationCodeCreateWithoutClientInput!
  where: oAuthAuthorizationCodeWhereUniqueInput!
}

input oAuthAuthorizationCodeCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthAuthorizationCodeCreateWithoutScopesInput!
  where: oAuthAuthorizationCodeWhereUniqueInput!
}

input oAuthAuthorizationCodeCreateOrConnectWithoutUserInput {
  create: oAuthAuthorizationCodeCreateWithoutUserInput!
  where: oAuthAuthorizationCodeWhereUniqueInput!
}

input oAuthAuthorizationCodeCreateWithoutClientInput {
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
  Scopes: oAuthScopeCreateManyWithoutAuthorizationCodesInput
  updatedAt: DateTime
  User: UserCreateOneWithoutAuthorizationCodesInput!
}

input oAuthAuthorizationCodeCreateWithoutScopesInput {
  Client: oAuthClientCreateOneWithoutAuthorizationCodesInput!
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutAuthorizationCodesInput!
}

input oAuthAuthorizationCodeCreateWithoutUserInput {
  Client: oAuthClientCreateOneWithoutAuthorizationCodesInput!
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
  Scopes: oAuthScopeCreateManyWithoutAuthorizationCodesInput
  updatedAt: DateTime
}

input oAuthAuthorizationCodeWhereUniqueInput {
  code_oAuthClientId: CodeOAuthClientIdCompoundUniqueInput
  id: String
}

type oAuthClient {
  accessTokenLifetime: Int!
  AccessTokens(after: oAuthAccessTokenWhereUniqueInput, before: oAuthAccessTokenWhereUniqueInput, first: Int, last: Int): [oAuthAccessToken!]!
  AuthorizationCodes(after: oAuthAuthorizationCodeWhereUniqueInput, before: oAuthAuthorizationCodeWhereUniqueInput, first: Int, last: Int): [oAuthAuthorizationCode!]!
  createdAt: DateTime!
  Grants(after: oAuthGrantWhereUniqueInput, before: oAuthGrantWhereUniqueInput, first: Int, last: Int): [oAuthGrant!]!
  id: String!
  idTokenLifetime: Int!
  isTrusted: Boolean!
  JavascriptOrigins(after: oAuthJavascriptOriginWhereUniqueInput, before: oAuthJavascriptOriginWhereUniqueInput, first: Int, last: Int): [oAuthJavascriptOrigin!]!
  name: String!
  RedirectUris(after: oAuthRedirectURIWhereUniqueInput, before: oAuthRedirectURIWhereUniqueInput, first: Int, last: Int): [oAuthRedirectURI!]!
  refreshTokenLifetime: Int!
  RefreshTokens(after: oAuthRefreshTokenWhereUniqueInput, before: oAuthRefreshTokenWhereUniqueInput, first: Int, last: Int): [oAuthRefreshToken!]!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  updatedAt: DateTime!
}

input oAuthClientCreateInput {
  accessTokenLifetime: Int
  AccessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  Grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  JavascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  logo: String!
  name: String!
  RedirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  ResourceServers: oAuthResourceServerCreateManyWithoutClientInput
  Scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutClientsInput!
}

input oAuthClientCreateManyWithoutScopesInput {
  connect: [oAuthClientWhereUniqueInput!]
  connectOrCreate: [oAuthClientCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthClientCreateWithoutScopesInput!]
}

input oAuthClientCreateManyWithoutUserPoolInput {
  connect: [oAuthClientWhereUniqueInput!]
  connectOrCreate: [oAuthClientCreateOrConnectWithoutUserPoolInput!]
  create: [oAuthClientCreateWithoutUserPoolInput!]
}

input oAuthClientCreateOneWithoutAccessTokensInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutoAuthAccessTokenInput
  create: oAuthClientCreateWithoutAccessTokensInput
}

input oAuthClientCreateOneWithoutAuthorizationCodesInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutoAuthAuthorizationCodeInput
  create: oAuthClientCreateWithoutAuthorizationCodesInput
}

input oAuthClientCreateOneWithoutRefreshTokensInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutoAuthRefreshTokenInput
  create: oAuthClientCreateWithoutRefreshTokensInput
}

input oAuthClientCreateOneWithoutResourceServersInput {
  connect: oAuthClientWhereUniqueInput
  connectOrCreate: oAuthClientCreateOrConnectWithoutoAuthResourceServerInput
  create: oAuthClientCreateWithoutResourceServersInput
}

input oAuthClientCreateOrConnectWithoutoAuthAccessTokenInput {
  create: oAuthClientCreateWithoutAccessTokensInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutoAuthAuthorizationCodeInput {
  create: oAuthClientCreateWithoutAuthorizationCodesInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutoAuthRefreshTokenInput {
  create: oAuthClientCreateWithoutRefreshTokensInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutoAuthResourceServerInput {
  create: oAuthClientCreateWithoutResourceServersInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthClientCreateWithoutScopesInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateOrConnectWithoutUserPoolInput {
  create: oAuthClientCreateWithoutUserPoolInput!
  where: oAuthClientWhereUniqueInput!
}

input oAuthClientCreateWithoutAccessTokensInput {
  accessTokenLifetime: Int
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  Grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  JavascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  logo: String!
  name: String!
  RedirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  ResourceServers: oAuthResourceServerCreateManyWithoutClientInput
  Scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutClientsInput!
}

input oAuthClientCreateWithoutAuthorizationCodesInput {
  accessTokenLifetime: Int
  AccessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  createdAt: DateTime
  Grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  JavascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  logo: String!
  name: String!
  RedirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  ResourceServers: oAuthResourceServerCreateManyWithoutClientInput
  Scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutClientsInput!
}

input oAuthClientCreateWithoutRefreshTokensInput {
  accessTokenLifetime: Int
  AccessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  Grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  JavascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  logo: String!
  name: String!
  RedirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  ResourceServers: oAuthResourceServerCreateManyWithoutClientInput
  Scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutClientsInput!
}

input oAuthClientCreateWithoutResourceServersInput {
  accessTokenLifetime: Int
  AccessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  Grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  JavascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  logo: String!
  name: String!
  RedirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  Scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutClientsInput!
}

input oAuthClientCreateWithoutScopesInput {
  accessTokenLifetime: Int
  AccessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  Grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  JavascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  logo: String!
  name: String!
  RedirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  ResourceServers: oAuthResourceServerCreateManyWithoutClientInput
  secret: String
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutClientsInput!
}

input oAuthClientCreateWithoutUserPoolInput {
  accessTokenLifetime: Int
  AccessTokens: oAuthAccessTokenCreateManyWithoutClientInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutClientInput
  createdAt: DateTime
  Grants: oAuthGrantCreateManyWithoutClientsInput
  id: String
  idTokenLifetime: Int
  isTrusted: Boolean
  JavascriptOrigins: oAuthJavascriptOriginCreateManyWithoutClientInput
  logo: String!
  name: String!
  RedirectUris: oAuthRedirectURICreateManyWithoutClientInput
  refreshTokenLifetime: Int
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutClientInput
  ResourceServers: oAuthResourceServerCreateManyWithoutClientInput
  Scopes: oAuthScopeCreateManyWithoutClientsInput
  secret: String
  updatedAt: DateTime
}

input oAuthClientWhereUniqueInput {
  id: String
  name: String
}

type oAuthCustomScope {
  createdAt: DateTime!
  description: String
  name: String!
  ResourceServer: oAuthResourceServer!
  updatedAt: DateTime!
}

input oAuthCustomScopeCreateManyWithoutResourceServerInput {
  connect: [oAuthCustomScopeWhereUniqueInput!]
  connectOrCreate: [oAuthCustomScopeCreateOrConnectWithoutoAuthResourceServerInput!]
  create: [oAuthCustomScopeCreateWithoutResourceServerInput!]
}

input oAuthCustomScopeCreateManyWithoutRolesInput {
  connect: [oAuthCustomScopeWhereUniqueInput!]
  connectOrCreate: [oAuthCustomScopeCreateOrConnectWithoutRoleInput!]
  create: [oAuthCustomScopeCreateWithoutRolesInput!]
}

input oAuthCustomScopeCreateOrConnectWithoutoAuthResourceServerInput {
  create: oAuthCustomScopeCreateWithoutResourceServerInput!
  where: oAuthCustomScopeWhereUniqueInput!
}

input oAuthCustomScopeCreateOrConnectWithoutRoleInput {
  create: oAuthCustomScopeCreateWithoutRolesInput!
  where: oAuthCustomScopeWhereUniqueInput!
}

input oAuthCustomScopeCreateWithoutResourceServerInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  Roles: RoleCreateManyWithoutCustomScopesInput
  updatedAt: DateTime
}

input oAuthCustomScopeCreateWithoutRolesInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  ResourceServer: oAuthResourceServerCreateOneWithoutScopesInput!
  updatedAt: DateTime
}

input oAuthCustomScopeWhereUniqueInput {
  id: String
}

type oAuthGrant {
  createdAt: DateTime!
  grantType: GrantType!
}

input oAuthGrantCreateManyWithoutClientsInput {
  connect: [oAuthGrantWhereUniqueInput!]
  connectOrCreate: [oAuthGrantCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthGrantCreateWithoutClientsInput!]
}

input oAuthGrantCreateOrConnectWithoutoAuthClientInput {
  create: oAuthGrantCreateWithoutClientsInput!
  where: oAuthGrantWhereUniqueInput!
}

input oAuthGrantCreateWithoutClientsInput {
  createdAt: DateTime
  grantType: GrantType!
  id: String
  updatedAt: DateTime
}

input oAuthGrantWhereUniqueInput {
  id: String
}

type oAuthJavascriptOrigin {
  createdAt: DateTime!
  uri: String!
}

input oAuthJavascriptOriginCreateManyWithoutClientInput {
  connect: [oAuthJavascriptOriginWhereUniqueInput!]
  connectOrCreate: [oAuthJavascriptOriginCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthJavascriptOriginCreateWithoutClientInput!]
}

input oAuthJavascriptOriginCreateOrConnectWithoutoAuthClientInput {
  create: oAuthJavascriptOriginCreateWithoutClientInput!
  where: oAuthJavascriptOriginWhereUniqueInput!
}

input oAuthJavascriptOriginCreateWithoutClientInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  uri: String!
}

input oAuthJavascriptOriginWhereUniqueInput {
  id: String
}

type oAuthRedirectURI {
  createdAt: DateTime!
  url: String!
}

input oAuthRedirectURICreateManyWithoutClientInput {
  connect: [oAuthRedirectURIWhereUniqueInput!]
  connectOrCreate: [oAuthRedirectURICreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthRedirectURICreateWithoutClientInput!]
}

input oAuthRedirectURICreateOrConnectWithoutoAuthClientInput {
  create: oAuthRedirectURICreateWithoutClientInput!
  where: oAuthRedirectURIWhereUniqueInput!
}

input oAuthRedirectURICreateWithoutClientInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  url: String!
}

input oAuthRedirectURIWhereUniqueInput {
  id: String
}

type oAuthRefreshToken {
  createdAt: DateTime!
  expirationDate: DateTime!
  refreshToken: String!
}

input oAuthRefreshTokenCreateManyWithoutClientInput {
  connect: [oAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [oAuthRefreshTokenCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthRefreshTokenCreateWithoutClientInput!]
}

input oAuthRefreshTokenCreateManyWithoutScopesInput {
  connect: [oAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [oAuthRefreshTokenCreateOrConnectWithoutoAuthScopeInput!]
  create: [oAuthRefreshTokenCreateWithoutScopesInput!]
}

input oAuthRefreshTokenCreateManyWithoutUserInput {
  connect: [oAuthRefreshTokenWhereUniqueInput!]
  connectOrCreate: [oAuthRefreshTokenCreateOrConnectWithoutUserInput!]
  create: [oAuthRefreshTokenCreateWithoutUserInput!]
}

input oAuthRefreshTokenCreateOrConnectWithoutoAuthClientInput {
  create: oAuthRefreshTokenCreateWithoutClientInput!
  where: oAuthRefreshTokenWhereUniqueInput!
}

input oAuthRefreshTokenCreateOrConnectWithoutoAuthScopeInput {
  create: oAuthRefreshTokenCreateWithoutScopesInput!
  where: oAuthRefreshTokenWhereUniqueInput!
}

input oAuthRefreshTokenCreateOrConnectWithoutUserInput {
  create: oAuthRefreshTokenCreateWithoutUserInput!
  where: oAuthRefreshTokenWhereUniqueInput!
}

input oAuthRefreshTokenCreateWithoutClientInput {
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String
  Scopes: oAuthScopeCreateManyWithoutRefreshTokenScopeInput
  updatedAt: DateTime
  User: UserCreateOneWithoutRefreshTokensInput
}

input oAuthRefreshTokenCreateWithoutScopesInput {
  Client: oAuthClientCreateOneWithoutRefreshTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String
  updatedAt: DateTime
  User: UserCreateOneWithoutRefreshTokensInput
}

input oAuthRefreshTokenCreateWithoutUserInput {
  Client: oAuthClientCreateOneWithoutRefreshTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String
  Scopes: oAuthScopeCreateManyWithoutRefreshTokenScopeInput
  updatedAt: DateTime
}

input oAuthRefreshTokenWhereUniqueInput {
  id: String
  refreshToken_oAuthClientId: RefreshTokenOAuthClientIdCompoundUniqueInput
  userId_oAuthClientId: UserIdOAuthClientIdCompoundUniqueInput
}

type oAuthResourceServer {
  createdAt: DateTime!
  identifier: String!
  name: String!
  Scopes(after: oAuthCustomScopeWhereUniqueInput, before: oAuthCustomScopeWhereUniqueInput, first: Int, last: Int): [oAuthCustomScope!]!
}

input oAuthResourceServerCreateManyWithoutClientInput {
  connect: [oAuthResourceServerWhereUniqueInput!]
  connectOrCreate: [oAuthResourceServerCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthResourceServerCreateWithoutClientInput!]
}

input oAuthResourceServerCreateManyWithoutUserPoolInput {
  connect: [oAuthResourceServerWhereUniqueInput!]
  connectOrCreate: [oAuthResourceServerCreateOrConnectWithoutUserPoolInput!]
  create: [oAuthResourceServerCreateWithoutUserPoolInput!]
}

input oAuthResourceServerCreateOneWithoutScopesInput {
  connect: oAuthResourceServerWhereUniqueInput
  connectOrCreate: oAuthResourceServerCreateOrConnectWithoutoAuthCustomScopeInput
  create: oAuthResourceServerCreateWithoutScopesInput
}

input oAuthResourceServerCreateOrConnectWithoutoAuthClientInput {
  create: oAuthResourceServerCreateWithoutClientInput!
  where: oAuthResourceServerWhereUniqueInput!
}

input oAuthResourceServerCreateOrConnectWithoutoAuthCustomScopeInput {
  create: oAuthResourceServerCreateWithoutScopesInput!
  where: oAuthResourceServerWhereUniqueInput!
}

input oAuthResourceServerCreateOrConnectWithoutUserPoolInput {
  create: oAuthResourceServerCreateWithoutUserPoolInput!
  where: oAuthResourceServerWhereUniqueInput!
}

input oAuthResourceServerCreateWithoutClientInput {
  createdAt: DateTime
  id: String
  identifier: String!
  name: String!
  Scopes: oAuthCustomScopeCreateManyWithoutResourceServerInput
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutResourceServersInput!
}

input oAuthResourceServerCreateWithoutScopesInput {
  Client: oAuthClientCreateOneWithoutResourceServersInput!
  createdAt: DateTime
  id: String
  identifier: String!
  name: String!
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutResourceServersInput!
}

input oAuthResourceServerCreateWithoutUserPoolInput {
  Client: oAuthClientCreateOneWithoutResourceServersInput!
  createdAt: DateTime
  id: String
  identifier: String!
  name: String!
  Scopes: oAuthCustomScopeCreateManyWithoutResourceServerInput
  updatedAt: DateTime
}

input oAuthResourceServerWhereUniqueInput {
  id: String
  identifier: String
}

type oAuthScope {
  description: String
  name: String!
}

input oAuthScopeCreateManyWithoutAccessTokensInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthAccessTokenInput!]
  create: [oAuthScopeCreateWithoutAccessTokensInput!]
}

input oAuthScopeCreateManyWithoutAuthorizationCodesInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthAuthorizationCodeInput!]
  create: [oAuthScopeCreateWithoutAuthorizationCodesInput!]
}

input oAuthScopeCreateManyWithoutClientsInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthClientInput!]
  create: [oAuthScopeCreateWithoutClientsInput!]
}

input oAuthScopeCreateManyWithoutRefreshTokenScopeInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutoAuthRefreshTokenInput!]
  create: [oAuthScopeCreateWithoutRefreshTokenScopeInput!]
}

input oAuthScopeCreateManyWithoutRolesInput {
  connect: [oAuthScopeWhereUniqueInput!]
  connectOrCreate: [oAuthScopeCreateOrConnectWithoutRoleInput!]
  create: [oAuthScopeCreateWithoutRolesInput!]
}

input oAuthScopeCreateOrConnectWithoutoAuthAccessTokenInput {
  create: oAuthScopeCreateWithoutAccessTokensInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateOrConnectWithoutoAuthAuthorizationCodeInput {
  create: oAuthScopeCreateWithoutAuthorizationCodesInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateOrConnectWithoutoAuthClientInput {
  create: oAuthScopeCreateWithoutClientsInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateOrConnectWithoutoAuthRefreshTokenInput {
  create: oAuthScopeCreateWithoutRefreshTokenScopeInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateOrConnectWithoutRoleInput {
  create: oAuthScopeCreateWithoutRolesInput!
  where: oAuthScopeWhereUniqueInput!
}

input oAuthScopeCreateWithoutAccessTokensInput {
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutScopesInput
  Clients: oAuthClientCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  RefreshTokenScope: oAuthRefreshTokenCreateManyWithoutScopesInput
  Roles: RoleCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeCreateWithoutAuthorizationCodesInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutScopesInput
  Clients: oAuthClientCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  RefreshTokenScope: oAuthRefreshTokenCreateManyWithoutScopesInput
  Roles: RoleCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeCreateWithoutClientsInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutScopesInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  RefreshTokenScope: oAuthRefreshTokenCreateManyWithoutScopesInput
  Roles: RoleCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeCreateWithoutRefreshTokenScopeInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutScopesInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutScopesInput
  Clients: oAuthClientCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  Roles: RoleCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeCreateWithoutRolesInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutScopesInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutScopesInput
  Clients: oAuthClientCreateManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  RefreshTokenScope: oAuthRefreshTokenCreateManyWithoutScopesInput
  updatedAt: DateTime
}

input oAuthScopeWhereUniqueInput {
  id: String
}

type Organization {
  address: String
  name: String!
  UserPools(after: UserPoolWhereUniqueInput, before: UserPoolWhereUniqueInput, first: Int, last: Int): [UserPool!]!
}

input OrganizationCreateOneWithoutUserPoolsInput {
  connect: OrganizationWhereUniqueInput
  connectOrCreate: OrganizationCreateOrConnectWithoutUserPoolInput
  create: OrganizationCreateWithoutUserPoolsInput
}

input OrganizationCreateOrConnectWithoutUserPoolInput {
  create: OrganizationCreateWithoutUserPoolsInput!
  where: OrganizationWhereUniqueInput!
}

input OrganizationCreateWithoutUserPoolsInput {
  address: String
  createdAt: DateTime
  id: String
  name: String!
  phoneNumber: String
  updatedAt: DateTime
  url: String
}

input OrganizationWhereUniqueInput {
  id: String
}

input PasswordResetCreateManyWithoutUserInput {
  connect: [PasswordResetWhereUniqueInput!]
  connectOrCreate: [PasswordResetCreateOrConnectWithoutUserInput!]
  create: [PasswordResetCreateWithoutUserInput!]
}

input PasswordResetCreateOrConnectWithoutUserInput {
  create: PasswordResetCreateWithoutUserInput!
  where: PasswordResetWhereUniqueInput!
}

input PasswordResetCreateWithoutUserInput {
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  token: String!
  updatedAt: DateTime
}

input PasswordResetWhereUniqueInput {
  id: String
}

type Photo {
  Profile: Profile!
}

input PhotoCreateManyWithoutProfileInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  create: [PhotoCreateWithoutProfileInput!]
}

input PhotoCreateOrConnectWithoutProfileInput {
  create: PhotoCreateWithoutProfileInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateWithoutProfileInput {
  createdAt: DateTime
  id: String
  isCurrentProfileImage: Boolean!
  updatedAt: DateTime
  value: String!
}

input PhotoWhereUniqueInput {
  id: String
}

type Profile {
  birthdate: DateTime
  createdAt: DateTime!
  displayName: String
  firstName: String
  gender: Gender
  lastName: String
  mobileNumber: String
  Photos(after: PhotoWhereUniqueInput, before: PhotoWhereUniqueInput, first: Int, last: Int): [Photo!]!
  updatedAt: DateTime!
  User: User!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  birthdate: DateTime
  createdAt: DateTime
  displayName: String
  Emails: EmailCreateManyWithoutProfileInput
  firstName: String
  gender: Gender
  id: String
  lastName: String
  mobileNumber: String
  Photos: PhotoCreateManyWithoutProfileInput
  updatedAt: DateTime
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  oAuthAccessToken(where: oAuthAccessTokenWhereUniqueInput!): oAuthAccessToken
  oAuthAuthorizationCode(where: oAuthAuthorizationCodeWhereUniqueInput!): oAuthAuthorizationCode
  oAuthClient(where: oAuthClientWhereUniqueInput!): oAuthClient
  oAuthClients(after: oAuthClientWhereUniqueInput, before: oAuthClientWhereUniqueInput, first: Int, last: Int): [oAuthClient!]!
  oAuthGrants(after: oAuthGrantWhereUniqueInput, before: oAuthGrantWhereUniqueInput, first: Int, last: Int): [oAuthGrant!]!
  oAuthRefreshToken(where: oAuthRefreshTokenWhereUniqueInput!): oAuthRefreshToken
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input RefreshTokenOAuthClientIdCompoundUniqueInput {
  oAuthClientId: String!
  refreshToken: String!
}

type Role {
  createdAt: DateTime!
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  name: String!
  Scopes(after: oAuthScopeWhereUniqueInput, before: oAuthScopeWhereUniqueInput, first: Int, last: Int): [oAuthScope!]!
  updatedAt: DateTime!
  Users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input RoleCreateManyWithoutCustomScopesInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutoAuthCustomScopeInput!]
  create: [RoleCreateWithoutCustomScopesInput!]
}

input RoleCreateManyWithoutGroupsInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutGroupInput!]
  create: [RoleCreateWithoutGroupsInput!]
}

input RoleCreateManyWithoutScopesInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutoAuthScopeInput!]
  create: [RoleCreateWithoutScopesInput!]
}

input RoleCreateManyWithoutUserPoolInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutUserPoolInput!]
  create: [RoleCreateWithoutUserPoolInput!]
}

input RoleCreateManyWithoutUsersInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutUserInput!]
  create: [RoleCreateWithoutUsersInput!]
}

input RoleCreateOrConnectWithoutGroupInput {
  create: RoleCreateWithoutGroupsInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateOrConnectWithoutoAuthCustomScopeInput {
  create: RoleCreateWithoutCustomScopesInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateOrConnectWithoutoAuthScopeInput {
  create: RoleCreateWithoutScopesInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateOrConnectWithoutUserInput {
  create: RoleCreateWithoutUsersInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateOrConnectWithoutUserPoolInput {
  create: RoleCreateWithoutUserPoolInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateWithoutCustomScopesInput {
  createdAt: DateTime
  description: String
  Groups: GroupCreateManyWithoutRolesInput
  id: String
  name: String!
  Scopes: oAuthScopeCreateManyWithoutRolesInput
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutRolesInput!
  Users: UserCreateManyWithoutRolesInput
}

input RoleCreateWithoutGroupsInput {
  createdAt: DateTime
  CustomScopes: oAuthCustomScopeCreateManyWithoutRolesInput
  description: String
  id: String
  name: String!
  Scopes: oAuthScopeCreateManyWithoutRolesInput
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutRolesInput!
  Users: UserCreateManyWithoutRolesInput
}

input RoleCreateWithoutScopesInput {
  createdAt: DateTime
  CustomScopes: oAuthCustomScopeCreateManyWithoutRolesInput
  description: String
  Groups: GroupCreateManyWithoutRolesInput
  id: String
  name: String!
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutRolesInput!
  Users: UserCreateManyWithoutRolesInput
}

input RoleCreateWithoutUserPoolInput {
  createdAt: DateTime
  CustomScopes: oAuthCustomScopeCreateManyWithoutRolesInput
  description: String
  Groups: GroupCreateManyWithoutRolesInput
  id: String
  name: String!
  Scopes: oAuthScopeCreateManyWithoutRolesInput
  updatedAt: DateTime
  Users: UserCreateManyWithoutRolesInput
}

input RoleCreateWithoutUsersInput {
  createdAt: DateTime
  CustomScopes: oAuthCustomScopeCreateManyWithoutRolesInput
  description: String
  Groups: GroupCreateManyWithoutRolesInput
  id: String
  name: String!
  Scopes: oAuthScopeCreateManyWithoutRolesInput
  updatedAt: DateTime
  UserPool: UserPoolCreateOneWithoutRolesInput!
}

input RoleWhereUniqueInput {
  id: String
}

enum SystemRole {
  ADMIN
  DEVELOPER
  SUPER_ADMIN
  USER
}

type SystemUser {
  createdAt: DateTime!
  email: String!
  id: String!
  role: SystemRole!
  updatedAt: DateTime!
  username: String!
}

type User {
  createdAt: DateTime!
  Devices(after: UserDeviceWhereUniqueInput, before: UserDeviceWhereUniqueInput, first: Int, last: Int): [UserDevice!]!
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  primaryEmail: String!
  Profile: Profile!
  Roles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  sub: String!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutUserInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutUserInput
  createdAt: DateTime
  Devices: UserDeviceCreateManyWithoutUserInput
  Groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  password: String!
  PasswordResets: PasswordResetCreateManyWithoutUserInput
  primaryEmail: String!
  Profile: ProfileCreateOneWithoutUserInput
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutUserInput
  Roles: RoleCreateManyWithoutUsersInput
  sub: String
  updatedAt: DateTime
  username: String!
  UserPool: UserPoolCreateOneWithoutUsersInput
}

input UserCreateManyWithoutGroupsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutGroupInput!]
  create: [UserCreateWithoutGroupsInput!]
}

input UserCreateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutRoleInput!]
  create: [UserCreateWithoutRolesInput!]
}

input UserCreateManyWithoutUserPoolInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutUserPoolInput!]
  create: [UserCreateWithoutUserPoolInput!]
}

input UserCreateOneWithoutAccessTokensInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutoAuthAccessTokenInput
  create: UserCreateWithoutAccessTokensInput
}

input UserCreateOneWithoutAuthorizationCodesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutoAuthAuthorizationCodeInput
  create: UserCreateWithoutAuthorizationCodesInput
}

input UserCreateOneWithoutRefreshTokensInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutoAuthRefreshTokenInput
  create: UserCreateWithoutRefreshTokensInput
}

input UserCreateOrConnectWithoutGroupInput {
  create: UserCreateWithoutGroupsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutoAuthAccessTokenInput {
  create: UserCreateWithoutAccessTokensInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutoAuthAuthorizationCodeInput {
  create: UserCreateWithoutAuthorizationCodesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutoAuthRefreshTokenInput {
  create: UserCreateWithoutRefreshTokensInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRoleInput {
  create: UserCreateWithoutRolesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserPoolInput {
  create: UserCreateWithoutUserPoolInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccessTokensInput {
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutUserInput
  createdAt: DateTime
  Devices: UserDeviceCreateManyWithoutUserInput
  Groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  password: String!
  PasswordResets: PasswordResetCreateManyWithoutUserInput
  primaryEmail: String!
  Profile: ProfileCreateOneWithoutUserInput
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutUserInput
  Roles: RoleCreateManyWithoutUsersInput
  sub: String
  updatedAt: DateTime
  username: String!
  UserPool: UserPoolCreateOneWithoutUsersInput
}

input UserCreateWithoutAuthorizationCodesInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutUserInput
  createdAt: DateTime
  Devices: UserDeviceCreateManyWithoutUserInput
  Groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  password: String!
  PasswordResets: PasswordResetCreateManyWithoutUserInput
  primaryEmail: String!
  Profile: ProfileCreateOneWithoutUserInput
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutUserInput
  Roles: RoleCreateManyWithoutUsersInput
  sub: String
  updatedAt: DateTime
  username: String!
  UserPool: UserPoolCreateOneWithoutUsersInput
}

input UserCreateWithoutGroupsInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutUserInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutUserInput
  createdAt: DateTime
  Devices: UserDeviceCreateManyWithoutUserInput
  id: String
  isDisabled: Boolean
  password: String!
  PasswordResets: PasswordResetCreateManyWithoutUserInput
  primaryEmail: String!
  Profile: ProfileCreateOneWithoutUserInput
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutUserInput
  Roles: RoleCreateManyWithoutUsersInput
  sub: String
  updatedAt: DateTime
  username: String!
  UserPool: UserPoolCreateOneWithoutUsersInput
}

input UserCreateWithoutRefreshTokensInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutUserInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutUserInput
  createdAt: DateTime
  Devices: UserDeviceCreateManyWithoutUserInput
  Groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  password: String!
  PasswordResets: PasswordResetCreateManyWithoutUserInput
  primaryEmail: String!
  Profile: ProfileCreateOneWithoutUserInput
  Roles: RoleCreateManyWithoutUsersInput
  sub: String
  updatedAt: DateTime
  username: String!
  UserPool: UserPoolCreateOneWithoutUsersInput
}

input UserCreateWithoutRolesInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutUserInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutUserInput
  createdAt: DateTime
  Devices: UserDeviceCreateManyWithoutUserInput
  Groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  password: String!
  PasswordResets: PasswordResetCreateManyWithoutUserInput
  primaryEmail: String!
  Profile: ProfileCreateOneWithoutUserInput
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutUserInput
  sub: String
  updatedAt: DateTime
  username: String!
  UserPool: UserPoolCreateOneWithoutUsersInput
}

input UserCreateWithoutUserPoolInput {
  AccessTokens: oAuthAccessTokenCreateManyWithoutUserInput
  AuthorizationCodes: oAuthAuthorizationCodeCreateManyWithoutUserInput
  createdAt: DateTime
  Devices: UserDeviceCreateManyWithoutUserInput
  Groups: GroupCreateManyWithoutUsersInput
  id: String
  isDisabled: Boolean
  password: String!
  PasswordResets: PasswordResetCreateManyWithoutUserInput
  primaryEmail: String!
  Profile: ProfileCreateOneWithoutUserInput
  RefreshTokens: oAuthRefreshTokenCreateManyWithoutUserInput
  Roles: RoleCreateManyWithoutUsersInput
  sub: String
  updatedAt: DateTime
  username: String!
}

type UserDevice {
  User: User!
}

input UserDeviceCreateManyWithoutUserInput {
  connect: [UserDeviceWhereUniqueInput!]
  connectOrCreate: [UserDeviceCreateOrConnectWithoutUserInput!]
  create: [UserDeviceCreateWithoutUserInput!]
}

input UserDeviceCreateOrConnectWithoutUserInput {
  create: UserDeviceCreateWithoutUserInput!
  where: UserDeviceWhereUniqueInput!
}

input UserDeviceCreateWithoutUserInput {
  createdAt: DateTime
  deviceKey: String!
  id: String
  isRemembered: Boolean
  lastIP: String!
  lastSeen: DateTime!
  name: String
  SDK: String
  updatedAt: DateTime
}

input UserDeviceWhereUniqueInput {
  id: String
}

input UserIdOAuthClientIdCompoundUniqueInput {
  oAuthClientId: String!
  userId: String!
}

type UserPool {
  Clients(after: oAuthClientWhereUniqueInput, before: oAuthClientWhereUniqueInput, first: Int, last: Int): [oAuthClient!]!
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  Organization: Organization!
  ResourceServers(after: oAuthResourceServerWhereUniqueInput, before: oAuthResourceServerWhereUniqueInput, first: Int, last: Int): [oAuthResourceServer!]!
  Roles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  Users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input UserPoolCreateOneWithoutClientsInput {
  connect: UserPoolWhereUniqueInput
  connectOrCreate: UserPoolCreateOrConnectWithoutoAuthClientInput
  create: UserPoolCreateWithoutClientsInput
}

input UserPoolCreateOneWithoutGroupsInput {
  connect: UserPoolWhereUniqueInput
  connectOrCreate: UserPoolCreateOrConnectWithoutGroupInput
  create: UserPoolCreateWithoutGroupsInput
}

input UserPoolCreateOneWithoutResourceServersInput {
  connect: UserPoolWhereUniqueInput
  connectOrCreate: UserPoolCreateOrConnectWithoutoAuthResourceServerInput
  create: UserPoolCreateWithoutResourceServersInput
}

input UserPoolCreateOneWithoutRolesInput {
  connect: UserPoolWhereUniqueInput
  connectOrCreate: UserPoolCreateOrConnectWithoutRoleInput
  create: UserPoolCreateWithoutRolesInput
}

input UserPoolCreateOneWithoutUsersInput {
  connect: UserPoolWhereUniqueInput
  connectOrCreate: UserPoolCreateOrConnectWithoutUserInput
  create: UserPoolCreateWithoutUsersInput
}

input UserPoolCreateOrConnectWithoutGroupInput {
  create: UserPoolCreateWithoutGroupsInput!
  where: UserPoolWhereUniqueInput!
}

input UserPoolCreateOrConnectWithoutoAuthClientInput {
  create: UserPoolCreateWithoutClientsInput!
  where: UserPoolWhereUniqueInput!
}

input UserPoolCreateOrConnectWithoutoAuthResourceServerInput {
  create: UserPoolCreateWithoutResourceServersInput!
  where: UserPoolWhereUniqueInput!
}

input UserPoolCreateOrConnectWithoutRoleInput {
  create: UserPoolCreateWithoutRolesInput!
  where: UserPoolWhereUniqueInput!
}

input UserPoolCreateOrConnectWithoutUserInput {
  create: UserPoolCreateWithoutUsersInput!
  where: UserPoolWhereUniqueInput!
}

input UserPoolCreateWithoutClientsInput {
  Groups: GroupCreateManyWithoutUserPoolInput
  id: String
  Organization: OrganizationCreateOneWithoutUserPoolsInput!
  ResourceServers: oAuthResourceServerCreateManyWithoutUserPoolInput
  Roles: RoleCreateManyWithoutUserPoolInput
  Users: UserCreateManyWithoutUserPoolInput
}

input UserPoolCreateWithoutGroupsInput {
  Clients: oAuthClientCreateManyWithoutUserPoolInput
  id: String
  Organization: OrganizationCreateOneWithoutUserPoolsInput!
  ResourceServers: oAuthResourceServerCreateManyWithoutUserPoolInput
  Roles: RoleCreateManyWithoutUserPoolInput
  Users: UserCreateManyWithoutUserPoolInput
}

input UserPoolCreateWithoutResourceServersInput {
  Clients: oAuthClientCreateManyWithoutUserPoolInput
  Groups: GroupCreateManyWithoutUserPoolInput
  id: String
  Organization: OrganizationCreateOneWithoutUserPoolsInput!
  Roles: RoleCreateManyWithoutUserPoolInput
  Users: UserCreateManyWithoutUserPoolInput
}

input UserPoolCreateWithoutRolesInput {
  Clients: oAuthClientCreateManyWithoutUserPoolInput
  Groups: GroupCreateManyWithoutUserPoolInput
  id: String
  Organization: OrganizationCreateOneWithoutUserPoolsInput!
  ResourceServers: oAuthResourceServerCreateManyWithoutUserPoolInput
  Users: UserCreateManyWithoutUserPoolInput
}

input UserPoolCreateWithoutUsersInput {
  Clients: oAuthClientCreateManyWithoutUserPoolInput
  Groups: GroupCreateManyWithoutUserPoolInput
  id: String
  Organization: OrganizationCreateOneWithoutUserPoolsInput!
  ResourceServers: oAuthResourceServerCreateManyWithoutUserPoolInput
  Roles: RoleCreateManyWithoutUserPoolInput
}

input UserPoolWhereUniqueInput {
  id: String
}

input UserWhereUniqueInput {
  id: String
  sub: String
  username: String
}
