### This file was generated by Nexus Schema
### Do not make changes to this file directly


input APICreateNestedOneWithoutScopesInput {
  connect: APIWhereUniqueInput
  connectOrCreate: APICreateOrConnectWithoutScopesInput
  create: APICreateWithoutScopesInput
}

input APICreateOrConnectWithoutScopesInput {
  create: APICreateWithoutScopesInput!
  where: APIWhereUniqueInput!
}

input APICreateWithoutScopesInput {
  apiTypes: ApiTypes!
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input APIWhereInput {
  AND: [APIWhereInput!]
  NOT: [APIWhereInput!]
  OR: [APIWhereInput!]
  Scopes: ScopeListRelationFilter
  apiTypes: EnumApiTypesFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input APIWhereUniqueInput {
  id: String
}

type AccessToken

"""Account status of users"""
enum AccountStatusType {
  ARCHIVED
  COMPROMISED
  CONFIRMED
  DISABLED
  FORCE_CHANGE_PASSWORD
  RESET_REQUIRED
  UNCONFIRMED
  UNKNOWN
}

enum ApiTypes {
  CUSTOM_API
  SYSTEM_API
}

type Application {
  RefreshTokens(after: RefreshTokenWhereUniqueInput, before: RefreshTokenWhereUniqueInput, first: Int, last: Int): [RefreshToken!]!
  Registrations(after: RegistrationWhereUniqueInput, before: RegistrationWhereUniqueInput, first: Int, last: Int): [Registration!]!
  createdAt: DateTime!
  id: String!
  name: String!
  secret: String!
  updatedAt: DateTime!
}

input ApplicationCreateNestedManyWithoutGrantedScopesInput {
  connect: [ApplicationWhereUniqueInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutGrantedScopesInput!]
  create: [ApplicationCreateWithoutGrantedScopesInput!]
}

input ApplicationCreateNestedOneWithoutAuthorizationCodeInput {
  connect: ApplicationWhereUniqueInput
  connectOrCreate: ApplicationCreateOrConnectWithoutAuthorizationCodeInput
  create: ApplicationCreateWithoutAuthorizationCodeInput
}

input ApplicationCreateNestedOneWithoutLoginLogsInput {
  connect: ApplicationWhereUniqueInput
  connectOrCreate: ApplicationCreateOrConnectWithoutLoginLogsInput
  create: ApplicationCreateWithoutLoginLogsInput
}

input ApplicationCreateNestedOneWithoutRefreshTokensInput {
  connect: ApplicationWhereUniqueInput
  connectOrCreate: ApplicationCreateOrConnectWithoutRefreshTokensInput
  create: ApplicationCreateWithoutRefreshTokensInput
}

input ApplicationCreateNestedOneWithoutRegistrationsInput {
  connect: ApplicationWhereUniqueInput
  connectOrCreate: ApplicationCreateOrConnectWithoutRegistrationsInput
  create: ApplicationCreateWithoutRegistrationsInput
}

input ApplicationCreateOrConnectWithoutAuthorizationCodeInput {
  create: ApplicationCreateWithoutAuthorizationCodeInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationCreateOrConnectWithoutGrantedScopesInput {
  create: ApplicationCreateWithoutGrantedScopesInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationCreateOrConnectWithoutLoginLogsInput {
  create: ApplicationCreateWithoutLoginLogsInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationCreateOrConnectWithoutRefreshTokensInput {
  create: ApplicationCreateWithoutRefreshTokensInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationCreateOrConnectWithoutRegistrationsInput {
  create: ApplicationCreateWithoutRegistrationsInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationCreateWithoutAuthorizationCodeInput {
  EnabledGrantTypes: EnabledGrantTypeCreateNestedManyWithoutApplicationInput
  FacebookConnection: FacebookConnectionCreateNestedOneWithoutApplicationsInput
  GoogleConnection: GoogleConnectionCreateNestedOneWithoutApplicationsInput
  GrantedScopes: ScopeCreateNestedManyWithoutUsingApplicationsInput
  LoginLogs: LoginLogCreateNestedManyWithoutApplicationInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutApplicationInput
  Registrations: RegistrationCreateNestedManyWithoutApplicationInput
  applicationLogo: String
  applicationType: ApplicationType!
  callbackURLs: String
  corsOrigins: String
  createdAt: DateTime
  description: String
  id: String
  idTokenExpirationInSecond: Int
  jwtSignatureAlgorithm: JWTSignatureAlgorithm
  loginURI: String
  logoutURLs: String
  name: String!
  refreshInactivityExpiration: Boolean
  refreshInactivityLifetimeInSecond: Int
  refreshTokenExpirationInSecond: Int
  refreshTokenReuseInterval: Int
  refreshTokenRotation: Boolean
  secret: String!
  updatedAt: DateTime
  webOrgins: String
}

input ApplicationCreateWithoutGrantedScopesInput {
  AuthorizationCode: AuthorizationCodeCreateNestedManyWithoutApplicationInput
  EnabledGrantTypes: EnabledGrantTypeCreateNestedManyWithoutApplicationInput
  FacebookConnection: FacebookConnectionCreateNestedOneWithoutApplicationsInput
  GoogleConnection: GoogleConnectionCreateNestedOneWithoutApplicationsInput
  LoginLogs: LoginLogCreateNestedManyWithoutApplicationInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutApplicationInput
  Registrations: RegistrationCreateNestedManyWithoutApplicationInput
  applicationLogo: String
  applicationType: ApplicationType!
  callbackURLs: String
  corsOrigins: String
  createdAt: DateTime
  description: String
  id: String
  idTokenExpirationInSecond: Int
  jwtSignatureAlgorithm: JWTSignatureAlgorithm
  loginURI: String
  logoutURLs: String
  name: String!
  refreshInactivityExpiration: Boolean
  refreshInactivityLifetimeInSecond: Int
  refreshTokenExpirationInSecond: Int
  refreshTokenReuseInterval: Int
  refreshTokenRotation: Boolean
  secret: String!
  updatedAt: DateTime
  webOrgins: String
}

input ApplicationCreateWithoutLoginLogsInput {
  AuthorizationCode: AuthorizationCodeCreateNestedManyWithoutApplicationInput
  EnabledGrantTypes: EnabledGrantTypeCreateNestedManyWithoutApplicationInput
  FacebookConnection: FacebookConnectionCreateNestedOneWithoutApplicationsInput
  GoogleConnection: GoogleConnectionCreateNestedOneWithoutApplicationsInput
  GrantedScopes: ScopeCreateNestedManyWithoutUsingApplicationsInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutApplicationInput
  Registrations: RegistrationCreateNestedManyWithoutApplicationInput
  applicationLogo: String
  applicationType: ApplicationType!
  callbackURLs: String
  corsOrigins: String
  createdAt: DateTime
  description: String
  id: String
  idTokenExpirationInSecond: Int
  jwtSignatureAlgorithm: JWTSignatureAlgorithm
  loginURI: String
  logoutURLs: String
  name: String!
  refreshInactivityExpiration: Boolean
  refreshInactivityLifetimeInSecond: Int
  refreshTokenExpirationInSecond: Int
  refreshTokenReuseInterval: Int
  refreshTokenRotation: Boolean
  secret: String!
  updatedAt: DateTime
  webOrgins: String
}

input ApplicationCreateWithoutRefreshTokensInput {
  AuthorizationCode: AuthorizationCodeCreateNestedManyWithoutApplicationInput
  EnabledGrantTypes: EnabledGrantTypeCreateNestedManyWithoutApplicationInput
  FacebookConnection: FacebookConnectionCreateNestedOneWithoutApplicationsInput
  GoogleConnection: GoogleConnectionCreateNestedOneWithoutApplicationsInput
  GrantedScopes: ScopeCreateNestedManyWithoutUsingApplicationsInput
  LoginLogs: LoginLogCreateNestedManyWithoutApplicationInput
  Registrations: RegistrationCreateNestedManyWithoutApplicationInput
  applicationLogo: String
  applicationType: ApplicationType!
  callbackURLs: String
  corsOrigins: String
  createdAt: DateTime
  description: String
  id: String
  idTokenExpirationInSecond: Int
  jwtSignatureAlgorithm: JWTSignatureAlgorithm
  loginURI: String
  logoutURLs: String
  name: String!
  refreshInactivityExpiration: Boolean
  refreshInactivityLifetimeInSecond: Int
  refreshTokenExpirationInSecond: Int
  refreshTokenReuseInterval: Int
  refreshTokenRotation: Boolean
  secret: String!
  updatedAt: DateTime
  webOrgins: String
}

input ApplicationCreateWithoutRegistrationsInput {
  AuthorizationCode: AuthorizationCodeCreateNestedManyWithoutApplicationInput
  EnabledGrantTypes: EnabledGrantTypeCreateNestedManyWithoutApplicationInput
  FacebookConnection: FacebookConnectionCreateNestedOneWithoutApplicationsInput
  GoogleConnection: GoogleConnectionCreateNestedOneWithoutApplicationsInput
  GrantedScopes: ScopeCreateNestedManyWithoutUsingApplicationsInput
  LoginLogs: LoginLogCreateNestedManyWithoutApplicationInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutApplicationInput
  applicationLogo: String
  applicationType: ApplicationType!
  callbackURLs: String
  corsOrigins: String
  createdAt: DateTime
  description: String
  id: String
  idTokenExpirationInSecond: Int
  jwtSignatureAlgorithm: JWTSignatureAlgorithm
  loginURI: String
  logoutURLs: String
  name: String!
  refreshInactivityExpiration: Boolean
  refreshInactivityLifetimeInSecond: Int
  refreshTokenExpirationInSecond: Int
  refreshTokenReuseInterval: Int
  refreshTokenRotation: Boolean
  secret: String!
  updatedAt: DateTime
  webOrgins: String
}

input ApplicationListRelationFilter {
  every: ApplicationWhereInput
  none: ApplicationWhereInput
  some: ApplicationWhereInput
}

enum ApplicationType {
  GENERIC
  MACHINE_TO_MACHINE
  NATIVE
  REGULAR_WEB_APPLICATION
  SINGLE_PAGE_APPLICATION
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  AuthorizationCode: AuthorizationCodeListRelationFilter
  EnabledGrantTypes: EnabledGrantTypeListRelationFilter
  FacebookConnection: FacebookConnectionWhereInput
  GoogleConnection: GoogleConnectionWhereInput
  GrantedScopes: ScopeListRelationFilter
  LoginLogs: LoginLogListRelationFilter
  NOT: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  RefreshTokens: RefreshTokenListRelationFilter
  Registrations: RegistrationListRelationFilter
  applicationLogo: StringFilter
  applicationType: EnumApplicationTypeFilter
  callbackURLs: StringFilter
  corsOrigins: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  facebookConnectionId: StringNullableFilter
  googleConnectionId: StringNullableFilter
  id: StringFilter
  idTokenExpirationInSecond: IntFilter
  jwtSignatureAlgorithm: EnumJWTSignatureAlgorithmFilter
  loginURI: StringNullableFilter
  logoutURLs: StringFilter
  name: StringFilter
  refreshInactivityExpiration: BoolFilter
  refreshInactivityLifetimeInSecond: IntFilter
  refreshTokenExpirationInSecond: IntFilter
  refreshTokenReuseInterval: IntFilter
  refreshTokenRotation: BoolFilter
  secret: StringFilter
  updatedAt: DateTimeFilter
  webOrgins: StringFilter
}

input ApplicationWhereUniqueInput {
  id: String
}

type AuthPayload {
  token: String!
  user: User!
}

type AuthorizationCode {
  Application: Application!
  User: User!
  code: String!
  createdAt: DateTime!
  expirationDate: DateTime!
  redirectURI: String!
}

input AuthorizationCodeCreateNestedManyWithoutApplicationInput {
  connect: [AuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [AuthorizationCodeCreateOrConnectWithoutApplicationInput!]
  create: [AuthorizationCodeCreateWithoutApplicationInput!]
}

input AuthorizationCodeCreateNestedManyWithoutUserInput {
  connect: [AuthorizationCodeWhereUniqueInput!]
  connectOrCreate: [AuthorizationCodeCreateOrConnectWithoutUserInput!]
  create: [AuthorizationCodeCreateWithoutUserInput!]
}

input AuthorizationCodeCreateOrConnectWithoutApplicationInput {
  create: AuthorizationCodeCreateWithoutApplicationInput!
  where: AuthorizationCodeWhereUniqueInput!
}

input AuthorizationCodeCreateOrConnectWithoutUserInput {
  create: AuthorizationCodeCreateWithoutUserInput!
  where: AuthorizationCodeWhereUniqueInput!
}

input AuthorizationCodeCreateWithoutApplicationInput {
  User: UserCreateNestedOneWithoutAuthorizationCodesInput!
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
}

input AuthorizationCodeCreateWithoutUserInput {
  Application: ApplicationCreateNestedOneWithoutAuthorizationCodeInput!
  code: String
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  redirectURI: String!
}

input AuthorizationCodeListRelationFilter {
  every: AuthorizationCodeWhereInput
  none: AuthorizationCodeWhereInput
  some: AuthorizationCodeWhereInput
}

input AuthorizationCodeWhereInput {
  AND: [AuthorizationCodeWhereInput!]
  Application: ApplicationWhereInput
  ApplicationId: StringFilter
  NOT: [AuthorizationCodeWhereInput!]
  OR: [AuthorizationCodeWhereInput!]
  User: UserWhereInput
  code: StringFilter
  createdAt: DateTimeFilter
  expirationDate: DateTimeFilter
  id: StringFilter
  redirectURI: StringFilter
  userId: StringFilter
}

input AuthorizationCodeWhereUniqueInput {
  code: String
  id: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnabledGrantTypeApplicationIdGrantTypeCompoundUniqueInput {
  applicationId: String!
  grantType: GrantType!
}

input EnabledGrantTypeCreateNestedManyWithoutApplicationInput {
  connect: [EnabledGrantTypeWhereUniqueInput!]
  connectOrCreate: [EnabledGrantTypeCreateOrConnectWithoutApplicationInput!]
  create: [EnabledGrantTypeCreateWithoutApplicationInput!]
}

input EnabledGrantTypeCreateOrConnectWithoutApplicationInput {
  create: EnabledGrantTypeCreateWithoutApplicationInput!
  where: EnabledGrantTypeWhereUniqueInput!
}

input EnabledGrantTypeCreateWithoutApplicationInput {
  createdAt: DateTime
  grantType: GrantType!
}

input EnabledGrantTypeListRelationFilter {
  every: EnabledGrantTypeWhereInput
  none: EnabledGrantTypeWhereInput
  some: EnabledGrantTypeWhereInput
}

input EnabledGrantTypeWhereInput {
  AND: [EnabledGrantTypeWhereInput!]
  Application: ApplicationWhereInput
  NOT: [EnabledGrantTypeWhereInput!]
  OR: [EnabledGrantTypeWhereInput!]
  applicationId: StringFilter
  createdAt: DateTimeFilter
  grantType: EnumGrantTypeFilter
}

input EnabledGrantTypeWhereUniqueInput {
  applicationId_grantType: EnabledGrantTypeApplicationIdGrantTypeCompoundUniqueInput
}

input EnumApiTypesFilter {
  equals: ApiTypes
  in: [ApiTypes!]
  not: NestedEnumApiTypesFilter
  notIn: [ApiTypes!]
}

input EnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
  notIn: [ApplicationType!]
}

input EnumGrantTypeFilter {
  equals: GrantType
  in: [GrantType!]
  not: NestedEnumGrantTypeFilter
  notIn: [GrantType!]
}

input EnumJWTSignatureAlgorithmFilter {
  equals: JWTSignatureAlgorithm
  in: [JWTSignatureAlgorithm!]
  not: NestedEnumJWTSignatureAlgorithmFilter
  notIn: [JWTSignatureAlgorithm!]
}

input EnumSyncUserProfileAttributesAtEachLoginFilter {
  equals: SyncUserProfileAttributesAtEachLogin
  in: [SyncUserProfileAttributesAtEachLogin!]
  not: NestedEnumSyncUserProfileAttributesAtEachLoginFilter
  notIn: [SyncUserProfileAttributesAtEachLogin!]
}

type ExternalIdentifier

"""Status of external identity"""
enum ExternalIdentityStatus {
  CONFIRMED
  DISABLED
  UNCONFIRMED
}

input FacebookConnectionCreateNestedOneWithoutApplicationsInput {
  connect: FacebookConnectionWhereUniqueInput
  connectOrCreate: FacebookConnectionCreateOrConnectWithoutApplicationsInput
  create: FacebookConnectionCreateWithoutApplicationsInput
}

input FacebookConnectionCreateOrConnectWithoutApplicationsInput {
  create: FacebookConnectionCreateWithoutApplicationsInput!
  where: FacebookConnectionWhereUniqueInput!
}

input FacebookConnectionCreateWithoutApplicationsInput {
  appId: String
  appSecret: String
  createdAt: DateTime
  id: String
  scopes: String!
  syncUserProfileAttributesAtEachLogin: SyncUserProfileAttributesAtEachLogin
  updatedAt: DateTime
}

input FacebookConnectionWhereInput {
  AND: [FacebookConnectionWhereInput!]
  Applications: ApplicationListRelationFilter
  NOT: [FacebookConnectionWhereInput!]
  OR: [FacebookConnectionWhereInput!]
  appId: StringFilter
  appSecret: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  scopes: StringFilter
  syncUserProfileAttributesAtEachLogin: EnumSyncUserProfileAttributesAtEachLoginFilter
  updatedAt: DateTimeFilter
}

input FacebookConnectionWhereUniqueInput {
  id: String
}

input FailedLoginLogCreateNestedManyWithoutUserInput {
  connect: [FailedLoginLogWhereUniqueInput!]
  connectOrCreate: [FailedLoginLogCreateOrConnectWithoutUserInput!]
  create: [FailedLoginLogCreateWithoutUserInput!]
}

input FailedLoginLogCreateOrConnectWithoutUserInput {
  create: FailedLoginLogCreateWithoutUserInput!
  where: FailedLoginLogWhereUniqueInput!
}

input FailedLoginLogCreateWithoutUserInput {
  count: Int
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FailedLoginLogListRelationFilter {
  every: FailedLoginLogWhereInput
  none: FailedLoginLogWhereInput
  some: FailedLoginLogWhereInput
}

input FailedLoginLogWhereInput {
  AND: [FailedLoginLogWhereInput!]
  NOT: [FailedLoginLogWhereInput!]
  OR: [FailedLoginLogWhereInput!]
  User: UserWhereInput
  count: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input FailedLoginLogWhereUniqueInput {
  id: String
}

"""Gender of users"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

input GoogleConnectionCreateNestedOneWithoutApplicationsInput {
  connect: GoogleConnectionWhereUniqueInput
  connectOrCreate: GoogleConnectionCreateOrConnectWithoutApplicationsInput
  create: GoogleConnectionCreateWithoutApplicationsInput
}

input GoogleConnectionCreateOrConnectWithoutApplicationsInput {
  create: GoogleConnectionCreateWithoutApplicationsInput!
  where: GoogleConnectionWhereUniqueInput!
}

input GoogleConnectionCreateWithoutApplicationsInput {
  allowedMobileClientIDs: String
  clientID: String
  clientSecret: String
  createdAt: DateTime
  id: String
  scopes: String!
  syncUserProfileAttributesAtEachLogin: SyncUserProfileAttributesAtEachLogin
  updatedAt: DateTime
}

input GoogleConnectionWhereInput {
  AND: [GoogleConnectionWhereInput!]
  Applications: ApplicationListRelationFilter
  NOT: [GoogleConnectionWhereInput!]
  OR: [GoogleConnectionWhereInput!]
  allowedMobileClientIDs: StringFilter
  clientID: StringFilter
  clientSecret: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  scopes: StringFilter
  syncUserProfileAttributesAtEachLogin: EnumSyncUserProfileAttributesAtEachLoginFilter
  updatedAt: DateTimeFilter
}

input GoogleConnectionWhereUniqueInput {
  id: String
}

type Grant

""""""
enum GrantType {
  AUTHORIZATION_CODE
  CLIENT_CREDENTIALS
  EXTENSION
  PASSWORD
  REFRESH_TOKEN
}

type Group {
  Roles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  Users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  createdAt: DateTime!
  description: String
  name: String!
  updatedAt: DateTime!
}

input GroupCreateNestedManyWithoutRolesInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutRolesInput!]
  create: [GroupCreateWithoutRolesInput!]
}

input GroupCreateNestedManyWithoutUsersInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutUsersInput!]
  create: [GroupCreateWithoutUsersInput!]
}

input GroupCreateOrConnectWithoutRolesInput {
  create: GroupCreateWithoutRolesInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateOrConnectWithoutUsersInput {
  create: GroupCreateWithoutUsersInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateWithoutRolesInput {
  Users: UserCreateNestedManyWithoutGroupsInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input GroupCreateWithoutUsersInput {
  Roles: RoleCreateNestedManyWithoutGroupsInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input GroupListRelationFilter {
  every: GroupWhereInput
  none: GroupWhereInput
  some: GroupWhereInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  Roles: RoleListRelationFilter
  Users: UserListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GroupWhereUniqueInput {
  id: String
  name: String
}

type IdProviderOnApplication

type IdentityProvider

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

enum JWTSignatureAlgorithm {
  HS256
  RS256
}

type JavascriptOrigin

scalar Json

input JsonNullableFilter {
  equals: Json
  not: Json
}

input LoginLogCreateNestedManyWithoutApplicationInput {
  connect: [LoginLogWhereUniqueInput!]
  connectOrCreate: [LoginLogCreateOrConnectWithoutApplicationInput!]
  create: [LoginLogCreateWithoutApplicationInput!]
}

input LoginLogCreateNestedManyWithoutUserInput {
  connect: [LoginLogWhereUniqueInput!]
  connectOrCreate: [LoginLogCreateOrConnectWithoutUserInput!]
  create: [LoginLogCreateWithoutUserInput!]
}

input LoginLogCreateOrConnectWithoutApplicationInput {
  create: LoginLogCreateWithoutApplicationInput!
  where: LoginLogWhereUniqueInput!
}

input LoginLogCreateOrConnectWithoutUserInput {
  create: LoginLogCreateWithoutUserInput!
  where: LoginLogWhereUniqueInput!
}

input LoginLogCreateWithoutApplicationInput {
  User: UserCreateNestedOneWithoutLoginLogsInput!
  createdAt: DateTime
  id: String
  ipAddress: String!
  updatedAt: DateTime
}

input LoginLogCreateWithoutUserInput {
  Application: ApplicationCreateNestedOneWithoutLoginLogsInput!
  createdAt: DateTime
  id: String
  ipAddress: String!
  updatedAt: DateTime
}

input LoginLogListRelationFilter {
  every: LoginLogWhereInput
  none: LoginLogWhereInput
  some: LoginLogWhereInput
}

input LoginLogWhereInput {
  AND: [LoginLogWhereInput!]
  Application: ApplicationWhereInput
  NOT: [LoginLogWhereInput!]
  OR: [LoginLogWhereInput!]
  User: UserWhereInput
  applicationId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ipAddress: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input LoginLogWhereUniqueInput {
  id: String
}

type MailSetting

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  login(email: String!, password: String!): AuthPayload
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumApiTypesFilter {
  equals: ApiTypes
  in: [ApiTypes!]
  not: NestedEnumApiTypesFilter
  notIn: [ApiTypes!]
}

input NestedEnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
  notIn: [ApplicationType!]
}

input NestedEnumGrantTypeFilter {
  equals: GrantType
  in: [GrantType!]
  not: NestedEnumGrantTypeFilter
  notIn: [GrantType!]
}

input NestedEnumJWTSignatureAlgorithmFilter {
  equals: JWTSignatureAlgorithm
  in: [JWTSignatureAlgorithm!]
  not: NestedEnumJWTSignatureAlgorithmFilter
  notIn: [JWTSignatureAlgorithm!]
}

input NestedEnumSyncUserProfileAttributesAtEachLoginFilter {
  equals: SyncUserProfileAttributesAtEachLogin
  in: [SyncUserProfileAttributesAtEachLogin!]
  not: NestedEnumSyncUserProfileAttributesAtEachLoginFilter
  notIn: [SyncUserProfileAttributesAtEachLogin!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input PermissionCreateNestedManyWithoutRolesInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutRolesInput!]
  create: [PermissionCreateWithoutRolesInput!]
}

input PermissionCreateOrConnectWithoutRolesInput {
  create: PermissionCreateWithoutRolesInput!
  where: PermissionWhereUniqueInput!
}

input PermissionCreateWithoutRolesInput {
  action: String!
  conditions: Json
  createdAt: DateTime
  fields: Json
  id: String
  inverted: Boolean
  reason: String
  subject: String!
  updatedAt: DateTime
}

input PermissionListRelationFilter {
  every: PermissionWhereInput
  none: PermissionWhereInput
  some: PermissionWhereInput
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  Roles: RoleListRelationFilter
  action: StringFilter
  conditions: JsonNullableFilter
  createdAt: DateTimeFilter
  fields: JsonNullableFilter
  id: StringFilter
  inverted: BoolFilter
  reason: StringNullableFilter
  subject: StringFilter
  updatedAt: DateTimeFilter
}

input PermissionWhereUniqueInput {
  id: String
}

type Profile

type Query {
  Test: String
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

type RedirectURI

type RefreshToken {
  createdAt: DateTime!
  expirationDate: DateTime!
  refreshToken: String!
}

input RefreshTokenCreateNestedManyWithoutApplicationInput {
  connect: [RefreshTokenWhereUniqueInput!]
  connectOrCreate: [RefreshTokenCreateOrConnectWithoutApplicationInput!]
  create: [RefreshTokenCreateWithoutApplicationInput!]
}

input RefreshTokenCreateNestedManyWithoutScopesInput {
  connect: [RefreshTokenWhereUniqueInput!]
  connectOrCreate: [RefreshTokenCreateOrConnectWithoutScopesInput!]
  create: [RefreshTokenCreateWithoutScopesInput!]
}

input RefreshTokenCreateNestedManyWithoutUserInput {
  connect: [RefreshTokenWhereUniqueInput!]
  connectOrCreate: [RefreshTokenCreateOrConnectWithoutUserInput!]
  create: [RefreshTokenCreateWithoutUserInput!]
}

input RefreshTokenCreateOrConnectWithoutApplicationInput {
  create: RefreshTokenCreateWithoutApplicationInput!
  where: RefreshTokenWhereUniqueInput!
}

input RefreshTokenCreateOrConnectWithoutScopesInput {
  create: RefreshTokenCreateWithoutScopesInput!
  where: RefreshTokenWhereUniqueInput!
}

input RefreshTokenCreateOrConnectWithoutUserInput {
  create: RefreshTokenCreateWithoutUserInput!
  where: RefreshTokenWhereUniqueInput!
}

input RefreshTokenCreateWithoutApplicationInput {
  Scopes: ScopeCreateNestedManyWithoutRefreshTokensInput
  User: UserCreateNestedOneWithoutRefreshTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String!
}

input RefreshTokenCreateWithoutScopesInput {
  Application: ApplicationCreateNestedOneWithoutRefreshTokensInput!
  User: UserCreateNestedOneWithoutRefreshTokensInput!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String!
}

input RefreshTokenCreateWithoutUserInput {
  Application: ApplicationCreateNestedOneWithoutRefreshTokensInput!
  Scopes: ScopeCreateNestedManyWithoutRefreshTokensInput
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
  refreshToken: String!
}

input RefreshTokenListRelationFilter {
  every: RefreshTokenWhereInput
  none: RefreshTokenWhereInput
  some: RefreshTokenWhereInput
}

input RefreshTokenWhereInput {
  AND: [RefreshTokenWhereInput!]
  Application: ApplicationWhereInput
  ApplicationId: StringFilter
  NOT: [RefreshTokenWhereInput!]
  OR: [RefreshTokenWhereInput!]
  Scopes: ScopeListRelationFilter
  User: UserWhereInput
  createdAt: DateTimeFilter
  expirationDate: DateTimeFilter
  id: StringFilter
  refreshToken: StringFilter
  userId: StringFilter
}

input RefreshTokenWhereUniqueInput {
  id: String
  refreshToken: String
}

type Registration {
  Application: Application!
  Roles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  User: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RegistrationCreateNestedManyWithoutApplicationInput {
  connect: [RegistrationWhereUniqueInput!]
  connectOrCreate: [RegistrationCreateOrConnectWithoutApplicationInput!]
  create: [RegistrationCreateWithoutApplicationInput!]
}

input RegistrationCreateNestedManyWithoutRolesInput {
  connect: [RegistrationWhereUniqueInput!]
  connectOrCreate: [RegistrationCreateOrConnectWithoutRolesInput!]
  create: [RegistrationCreateWithoutRolesInput!]
}

input RegistrationCreateNestedManyWithoutUserInput {
  connect: [RegistrationWhereUniqueInput!]
  connectOrCreate: [RegistrationCreateOrConnectWithoutUserInput!]
  create: [RegistrationCreateWithoutUserInput!]
}

input RegistrationCreateOrConnectWithoutApplicationInput {
  create: RegistrationCreateWithoutApplicationInput!
  where: RegistrationWhereUniqueInput!
}

input RegistrationCreateOrConnectWithoutRolesInput {
  create: RegistrationCreateWithoutRolesInput!
  where: RegistrationWhereUniqueInput!
}

input RegistrationCreateOrConnectWithoutUserInput {
  create: RegistrationCreateWithoutUserInput!
  where: RegistrationWhereUniqueInput!
}

input RegistrationCreateWithoutApplicationInput {
  Roles: RoleCreateNestedManyWithoutRegistrationsInput
  User: UserCreateNestedOneWithoutRegistrationsInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input RegistrationCreateWithoutRolesInput {
  Application: ApplicationCreateNestedOneWithoutRegistrationsInput!
  User: UserCreateNestedOneWithoutRegistrationsInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input RegistrationCreateWithoutUserInput {
  Application: ApplicationCreateNestedOneWithoutRegistrationsInput!
  Roles: RoleCreateNestedManyWithoutRegistrationsInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input RegistrationListRelationFilter {
  every: RegistrationWhereInput
  none: RegistrationWhereInput
  some: RegistrationWhereInput
}

input RegistrationUserIdApplicationIdCompoundUniqueInput {
  applicationId: String!
  userId: String!
}

input RegistrationWhereInput {
  AND: [RegistrationWhereInput!]
  Application: ApplicationWhereInput
  NOT: [RegistrationWhereInput!]
  OR: [RegistrationWhereInput!]
  Roles: RoleListRelationFilter
  User: UserWhereInput
  applicationId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input RegistrationWhereUniqueInput {
  id: String
  userId_applicationId: RegistrationUserIdApplicationIdCompoundUniqueInput
}

input RememberMeTokenCreateNestedManyWithoutUserInput {
  connect: [RememberMeTokenWhereUniqueInput!]
  connectOrCreate: [RememberMeTokenCreateOrConnectWithoutUserInput!]
  create: [RememberMeTokenCreateWithoutUserInput!]
}

input RememberMeTokenCreateOrConnectWithoutUserInput {
  create: RememberMeTokenCreateWithoutUserInput!
  where: RememberMeTokenWhereUniqueInput!
}

input RememberMeTokenCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  token: String!
}

input RememberMeTokenListRelationFilter {
  every: RememberMeTokenWhereInput
  none: RememberMeTokenWhereInput
  some: RememberMeTokenWhereInput
}

input RememberMeTokenWhereInput {
  AND: [RememberMeTokenWhereInput!]
  NOT: [RememberMeTokenWhereInput!]
  OR: [RememberMeTokenWhereInput!]
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  token: StringFilter
  userId: StringFilter
}

input RememberMeTokenWhereUniqueInput {
  id: String
  token: String
}

type ResourceServer

type Role {
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  Registrations(after: RegistrationWhereUniqueInput, before: RegistrationWhereUniqueInput, first: Int, last: Int): [Registration!]!
  createdAt: DateTime!
  name: String!
  updatedAt: DateTime!
}

input RoleCreateNestedManyWithoutGroupsInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutGroupsInput!]
  create: [RoleCreateWithoutGroupsInput!]
}

input RoleCreateNestedManyWithoutRegistrationsInput {
  connect: [RoleWhereUniqueInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutRegistrationsInput!]
  create: [RoleCreateWithoutRegistrationsInput!]
}

input RoleCreateOrConnectWithoutGroupsInput {
  create: RoleCreateWithoutGroupsInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateOrConnectWithoutRegistrationsInput {
  create: RoleCreateWithoutRegistrationsInput!
  where: RoleWhereUniqueInput!
}

input RoleCreateWithoutGroupsInput {
  Permissions: PermissionCreateNestedManyWithoutRolesInput
  Registrations: RegistrationCreateNestedManyWithoutRolesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input RoleCreateWithoutRegistrationsInput {
  Groups: GroupCreateNestedManyWithoutRolesInput
  Permissions: PermissionCreateNestedManyWithoutRolesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input RoleListRelationFilter {
  every: RoleWhereInput
  none: RoleWhereInput
  some: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  Groups: GroupListRelationFilter
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  Permissions: PermissionListRelationFilter
  Registrations: RegistrationListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input RoleWhereUniqueInput {
  id: String
  name: String
}

"""Security options of SMTP server"""
enum SMTPSecurity {
  NONE
  SSL
  TLS
}

type Scope {
  description: String
  name: String!
}

input ScopeCreateNestedManyWithoutRefreshTokensInput {
  connect: [ScopeWhereUniqueInput!]
  connectOrCreate: [ScopeCreateOrConnectWithoutRefreshTokensInput!]
  create: [ScopeCreateWithoutRefreshTokensInput!]
}

input ScopeCreateNestedManyWithoutUsingApplicationsInput {
  connect: [ScopeWhereUniqueInput!]
  connectOrCreate: [ScopeCreateOrConnectWithoutUsingApplicationsInput!]
  create: [ScopeCreateWithoutUsingApplicationsInput!]
}

input ScopeCreateOrConnectWithoutRefreshTokensInput {
  create: ScopeCreateWithoutRefreshTokensInput!
  where: ScopeWhereUniqueInput!
}

input ScopeCreateOrConnectWithoutUsingApplicationsInput {
  create: ScopeCreateWithoutUsingApplicationsInput!
  where: ScopeWhereUniqueInput!
}

input ScopeCreateWithoutRefreshTokensInput {
  API: APICreateNestedOneWithoutScopesInput!
  UsingApplications: ApplicationCreateNestedManyWithoutGrantedScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input ScopeCreateWithoutUsingApplicationsInput {
  API: APICreateNestedOneWithoutScopesInput!
  RefreshTokens: RefreshTokenCreateNestedManyWithoutScopesInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input ScopeListRelationFilter {
  every: ScopeWhereInput
  none: ScopeWhereInput
  some: ScopeWhereInput
}

input ScopeWhereInput {
  AND: [ScopeWhereInput!]
  API: APIWhereInput
  NOT: [ScopeWhereInput!]
  OR: [ScopeWhereInput!]
  RefreshTokens: RefreshTokenListRelationFilter
  UsingApplications: ApplicationListRelationFilter
  apiId: StringFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input ScopeWhereUniqueInput {
  id: String
  name: String
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""Supported providers"""
enum SupportedProvider {
  APPLE
  FACEBOOK
  GOOGLE
}

enum SyncUserProfileAttributesAtEachLogin {
  DISABLED
  ENABLED
}

type Tenant

type User {
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  Registrations(after: RegistrationWhereUniqueInput, before: RegistrationWhereUniqueInput, first: Int, last: Int): [Registration!]!
  createdAt: DateTime!
  email: String!
  id: String!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  AuthorizationCodes: AuthorizationCodeCreateNestedManyWithoutUserInput
  FailedLoginLogs: FailedLoginLogCreateNestedManyWithoutUserInput
  Groups: GroupCreateNestedManyWithoutUsersInput
  LoginLogs: LoginLogCreateNestedManyWithoutUserInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutUserInput
  Registrations: RegistrationCreateNestedManyWithoutUserInput
  RememberMeTokens: RememberMeTokenCreateNestedManyWithoutUserInput
  VerificationCodes: VerificationCodeCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  email_verified: Boolean
  id: String
  name: String!
  password: String!
  salt: String!
  updatedAt: DateTime
  username: String!
}

input UserCreateNestedManyWithoutGroupsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutGroupsInput!]
  create: [UserCreateWithoutGroupsInput!]
}

input UserCreateNestedOneWithoutAuthorizationCodesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAuthorizationCodesInput
  create: UserCreateWithoutAuthorizationCodesInput
}

input UserCreateNestedOneWithoutLoginLogsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLoginLogsInput
  create: UserCreateWithoutLoginLogsInput
}

input UserCreateNestedOneWithoutRefreshTokensInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefreshTokensInput
  create: UserCreateWithoutRefreshTokensInput
}

input UserCreateNestedOneWithoutRegistrationsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRegistrationsInput
  create: UserCreateWithoutRegistrationsInput
}

input UserCreateOrConnectWithoutAuthorizationCodesInput {
  create: UserCreateWithoutAuthorizationCodesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutLoginLogsInput {
  create: UserCreateWithoutLoginLogsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRefreshTokensInput {
  create: UserCreateWithoutRefreshTokensInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRegistrationsInput {
  create: UserCreateWithoutRegistrationsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAuthorizationCodesInput {
  FailedLoginLogs: FailedLoginLogCreateNestedManyWithoutUserInput
  Groups: GroupCreateNestedManyWithoutUsersInput
  LoginLogs: LoginLogCreateNestedManyWithoutUserInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutUserInput
  Registrations: RegistrationCreateNestedManyWithoutUserInput
  RememberMeTokens: RememberMeTokenCreateNestedManyWithoutUserInput
  VerificationCodes: VerificationCodeCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  email_verified: Boolean
  id: String
  name: String!
  password: String!
  salt: String!
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutGroupsInput {
  AuthorizationCodes: AuthorizationCodeCreateNestedManyWithoutUserInput
  FailedLoginLogs: FailedLoginLogCreateNestedManyWithoutUserInput
  LoginLogs: LoginLogCreateNestedManyWithoutUserInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutUserInput
  Registrations: RegistrationCreateNestedManyWithoutUserInput
  RememberMeTokens: RememberMeTokenCreateNestedManyWithoutUserInput
  VerificationCodes: VerificationCodeCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  email_verified: Boolean
  id: String
  name: String!
  password: String!
  salt: String!
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutLoginLogsInput {
  AuthorizationCodes: AuthorizationCodeCreateNestedManyWithoutUserInput
  FailedLoginLogs: FailedLoginLogCreateNestedManyWithoutUserInput
  Groups: GroupCreateNestedManyWithoutUsersInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutUserInput
  Registrations: RegistrationCreateNestedManyWithoutUserInput
  RememberMeTokens: RememberMeTokenCreateNestedManyWithoutUserInput
  VerificationCodes: VerificationCodeCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  email_verified: Boolean
  id: String
  name: String!
  password: String!
  salt: String!
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutRefreshTokensInput {
  AuthorizationCodes: AuthorizationCodeCreateNestedManyWithoutUserInput
  FailedLoginLogs: FailedLoginLogCreateNestedManyWithoutUserInput
  Groups: GroupCreateNestedManyWithoutUsersInput
  LoginLogs: LoginLogCreateNestedManyWithoutUserInput
  Registrations: RegistrationCreateNestedManyWithoutUserInput
  RememberMeTokens: RememberMeTokenCreateNestedManyWithoutUserInput
  VerificationCodes: VerificationCodeCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  email_verified: Boolean
  id: String
  name: String!
  password: String!
  salt: String!
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutRegistrationsInput {
  AuthorizationCodes: AuthorizationCodeCreateNestedManyWithoutUserInput
  FailedLoginLogs: FailedLoginLogCreateNestedManyWithoutUserInput
  Groups: GroupCreateNestedManyWithoutUsersInput
  LoginLogs: LoginLogCreateNestedManyWithoutUserInput
  RefreshTokens: RefreshTokenCreateNestedManyWithoutUserInput
  RememberMeTokens: RememberMeTokenCreateNestedManyWithoutUserInput
  VerificationCodes: VerificationCodeCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  email_verified: Boolean
  id: String
  name: String!
  password: String!
  salt: String!
  updatedAt: DateTime
  username: String!
}

type UserCustomAttribute

type UserDevice

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  email_verified: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  salt: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  AuthorizationCodes: AuthorizationCodeListRelationFilter
  FailedLoginLogs: FailedLoginLogListRelationFilter
  Groups: GroupListRelationFilter
  LoginLogs: LoginLogListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  RefreshTokens: RefreshTokenListRelationFilter
  Registrations: RegistrationListRelationFilter
  RememberMeTokens: RememberMeTokenListRelationFilter
  VerificationCodes: VerificationCodeListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  email_verified: BoolFilter
  id: StringFilter
  name: StringFilter
  password: StringFilter
  salt: StringFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}

input VerificationCodeCreateNestedManyWithoutUserInput {
  connect: [VerificationCodeWhereUniqueInput!]
  connectOrCreate: [VerificationCodeCreateOrConnectWithoutUserInput!]
  create: [VerificationCodeCreateWithoutUserInput!]
}

input VerificationCodeCreateOrConnectWithoutUserInput {
  create: VerificationCodeCreateWithoutUserInput!
  where: VerificationCodeWhereUniqueInput!
}

input VerificationCodeCreateWithoutUserInput {
  code: String!
  createdAt: DateTime
  expirationDate: DateTime!
  id: String
}

input VerificationCodeListRelationFilter {
  every: VerificationCodeWhereInput
  none: VerificationCodeWhereInput
  some: VerificationCodeWhereInput
}

input VerificationCodeUserIdCodeCompoundUniqueInput {
  code: String!
  userId: String!
}

input VerificationCodeWhereInput {
  AND: [VerificationCodeWhereInput!]
  NOT: [VerificationCodeWhereInput!]
  OR: [VerificationCodeWhereInput!]
  User: UserWhereInput
  code: StringFilter
  createdAt: DateTimeFilter
  expirationDate: DateTimeFilter
  id: StringFilter
  userId: StringFilter
}

input VerificationCodeWhereUniqueInput {
  id: String
  userId_code: VerificationCodeUserIdCodeCompoundUniqueInput
}
