### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccessToken {
  Application: Application!
  createdAt: DateTime!
  expirationDate: DateTime!
  User: User
}

input AccessTokenWhereUniqueInput {
  id: String
  jti: String
}

"""Account status of users"""
enum AccountStatusType {
  ARCHIVED
  COMPROMISED
  CONFIRMED
  DISABLED
  FORCE_CHANGE_PASSWORD
  RESET_REQUIRED
  UNCONFIRMED
  UNKNOWN
}

type Application {
  accessTokenLifetime: Int!
  AccessTokens(after: AccessTokenWhereUniqueInput, before: AccessTokenWhereUniqueInput, first: Int, last: Int): [AccessToken!]!
  AuthorizationCodes(after: AuthorizationCodeWhereUniqueInput, before: AuthorizationCodeWhereUniqueInput, first: Int, last: Int): [AuthorizationCode!]!
  createdAt: DateTime!
  EnabledScopes(after: ScopeWhereUniqueInput, before: ScopeWhereUniqueInput, first: Int, last: Int): [Scope!]!
  Grants(after: GrantWhereUniqueInput, before: GrantWhereUniqueInput, first: Int, last: Int): [Grant!]!
  id: String!
  idTokenLifetime: Int!
  JavascriptOrigins(after: JavascriptOriginWhereUniqueInput, before: JavascriptOriginWhereUniqueInput, first: Int, last: Int): [JavascriptOrigin!]!
  name: String!
  RedirectUris(after: RedirectURIWhereUniqueInput, before: RedirectURIWhereUniqueInput, first: Int, last: Int): [RedirectURI!]!
  refreshTokenLifetime: Int!
  RefreshTokens(after: RefreshTokenWhereUniqueInput, before: RefreshTokenWhereUniqueInput, first: Int, last: Int): [RefreshToken!]!
  Registrations(after: RegistrationWhereUniqueInput, before: RegistrationWhereUniqueInput, first: Int, last: Int): [Registration!]!
  Roles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  secret: String!
  trustedApplication: Boolean!
  updatedAt: DateTime!
}

input ApplicationWhereUniqueInput {
  id: String
  tenantId_name: TenantIdNameCompoundUniqueInput
}

type AuthorizationCode {
  Application: Application!
  code: String!
  createdAt: DateTime!
  expirationDate: DateTime!
  redirectURI: String!
  Scopes(after: ScopeWhereUniqueInput, before: ScopeWhereUniqueInput, first: Int, last: Int): [Scope!]!
  User: User!
}

input AuthorizationCodeWhereUniqueInput {
  code: String
  id: String
}

type AuthPayload {
  token: String!
  user: User!
}

scalar DateTime

type EmailSettings {
  createdAt: DateTime!
  from: String!
  host: String!
  id: String!
  name: String
  password: String
  port: String!
  SMTPSecurity: SMTPSecurity!
  updatedAt: DateTime!
  username: String
}

type ExternalIdentifier {
  Application: Application!
  createdAt: DateTime!
  data: Json
  IdentityProvider: IdentityProvider!
  isUserCreatedBefore: Boolean!
  providerType: SupportedProvider!
  status: ExternalIdentifierStatus!
  Tenant: Tenant!
  updatedAt: DateTime!
  User: User!
}

enum ExternalIdentifierStatus {
  CONFIRMED
  DISABLED
  UNCONFIRMED
}

input ExternalIdentifierWhereUniqueInput {
  id: String
}

"""Status of external identity"""
enum ExternalIdentityStatus {
  CONFIRMED
  DISABLED
  UNCONFIRMED
}

"""Gender of users"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

type Grant {
  createdAt: DateTime!
  grantType: GrantType!
}

""""""
enum GrantType {
  AUTHORIZATION_CODE
  CLIENT_CREDENTIALS
  EXTENSION
  PASSWORD
  REFRESH_TOKEN
}

input GrantWhereUniqueInput {
  grantType: GrantType
  id: String
}

type Group {
  createdAt: DateTime!
  description: String
  name: String!
  Roles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  updatedAt: DateTime!
  Users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input GroupWhereUniqueInput {
  id: String
  name: String
}

type IdentityProvider {
  Applications(after: IdProviderOnApplicationWhereUniqueInput, before: IdProviderOnApplicationWhereUniqueInput, first: Int, last: Int): [IdProviderOnApplication!]!
  createdAt: DateTime!
  data: Json!
  ExternalIdentifiers(after: ExternalIdentifierWhereUniqueInput, before: ExternalIdentifierWhereUniqueInput, first: Int, last: Int): [ExternalIdentifier!]!
  isEnabled: Boolean!
  providerType: SupportedProvider!
  updatedAt: DateTime!
}

type IdProviderOnApplication {
  Application: Application!
  createdAt: DateTime!
  data: Json
  IdentityProvider: IdentityProvider!
  isEnabled: Boolean!
  isOverwritten: Boolean!
  providerType: SupportedProvider!
  updatedAt: DateTime!
}

input IdProviderOnApplicationWhereUniqueInput {
  id: String
}

type JavascriptOrigin {
  createdAt: DateTime!
  uri: String!
}

input JavascriptOriginWhereUniqueInput {
  id: String
}

scalar Json

type Mutation {
  login(email: String!, password: String!): AuthPayload
}

input NameApplicationIdCompoundUniqueInput {
  applicationId: String!
  name: String!
}

input NameProfileIdCompoundUniqueInput {
  name: String!
  profileId: String!
}

type Profile {
  birthdate: DateTime
  createdAt: DateTime!
  displayName: String!
  firstName: String!
  gender: Gender!
  lastName: String!
  mobileNumber: String
  picture: String
  updatedAt: DateTime!
  User: User!
  UserCustomAttributes(after: UserCustomAttributeWhereUniqueInput, before: UserCustomAttributeWhereUniqueInput, first: Int, last: Int): [UserCustomAttribute!]!
}

type Query {
  Test: String
}

type RedirectURI {
  createdAt: DateTime!
  url: String!
}

input RedirectURIWhereUniqueInput {
  id: String
}

type RefreshToken {
  createdAt: DateTime!
  expirationDate: DateTime!
  refreshToken: String!
}

input RefreshTokenWhereUniqueInput {
  id: String
  refreshToken: String
}

type Registration {
  Application: Application!
  createdAt: DateTime!
  isVerified: Boolean!
  Roles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  updatedAt: DateTime!
  User: User!
  username: String!
}

input RegistrationWhereUniqueInput {
  id: String
  userId_applicationId: UserIdApplicationIdCompoundUniqueInput
  username_applicationId: UsernameApplicationIdCompoundUniqueInput
}

type ResourceServer {
  createdAt: DateTime!
  identifier: String!
  name: String!
  Scopes(after: ScopeWhereUniqueInput, before: ScopeWhereUniqueInput, first: Int, last: Int): [Scope!]!
}

type Role {
  ChildRoles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  createdAt: DateTime!
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  ParentRoles(after: RoleWhereUniqueInput, before: RoleWhereUniqueInput, first: Int, last: Int): [Role!]!
  permissions: Json
  Registrations(after: RegistrationWhereUniqueInput, before: RegistrationWhereUniqueInput, first: Int, last: Int): [Registration!]!
  updatedAt: DateTime!
}

input RoleWhereUniqueInput {
  id: String
  name_applicationId: NameApplicationIdCompoundUniqueInput
}

type Scope {
  description: String
  name: String!
}

input ScopeWhereUniqueInput {
  id: String
  name: String
}

"""Security options of SMTP server"""
enum SMTPSecurity {
  NONE
  SSL
  TLS
}

"""Supported providers"""
enum SupportedProvider {
  APPLE
  FACEBOOK
  GOOGLE
}

type Tenant {
  Applications(after: ApplicationWhereUniqueInput, before: ApplicationWhereUniqueInput, first: Int, last: Int): [Application!]!
  createdAt: DateTime!
  domainName: String!
  EmailSettings: EmailSettings
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  id: String!
  isAcitve: Boolean!
  updatedAt: DateTime!
}

input TenantIdNameCompoundUniqueInput {
  name: String!
  tenantId: String!
}

type User {
  accountStatusType: AccountStatusType!
  createdAt: DateTime!
  Devices(after: UserDeviceWhereUniqueInput, before: UserDeviceWhereUniqueInput, first: Int, last: Int): [UserDevice!]!
  email: String!
  ExternalIdentifiers(after: ExternalIdentifierWhereUniqueInput, before: ExternalIdentifierWhereUniqueInput, first: Int, last: Int): [ExternalIdentifier!]!
  Groups(after: GroupWhereUniqueInput, before: GroupWhereUniqueInput, first: Int, last: Int): [Group!]!
  Profile: Profile
  Registrations(after: RegistrationWhereUniqueInput, before: RegistrationWhereUniqueInput, first: Int, last: Int): [Registration!]!
  Tenant: Tenant!
  updatedAt: DateTime!
  username: String!
}

type UserCustomAttribute {
  name: String!
  Profile: Profile!
  value: String!
}

input UserCustomAttributeWhereUniqueInput {
  name_profileId: NameProfileIdCompoundUniqueInput
}

type UserDevice {
  User: User!
}

input UserDeviceWhereUniqueInput {
  id: String
}

input UserIdApplicationIdCompoundUniqueInput {
  applicationId: String!
  userId: String!
}

input UsernameApplicationIdCompoundUniqueInput {
  applicationId: String!
  username: String!
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
