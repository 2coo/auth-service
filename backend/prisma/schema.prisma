// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String              @id @default(uuid())
  name               String
  nickname           String
  username           String              @unique
  picture            String
  email              String              @unique
  email_verified     Boolean             @default(false)
  password           String
  salt               String
  Identities         Identity[]
  Groups             Group[]
  Registrations      Registration[]
  RememberMeTokens   RememberMeToken[]
  AuthorizationCodes AuthorizationCode[]
  RefreshTokens      RefreshToken[]
  VerificationCodes  VerificationCode[]
  FailedLoginLogs    FailedLoginLog[]
  LoginLogs          LoginLog[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Identity {
  id         String   @id @default(cuid())
  provider   String
  isSocial   Boolean
  User       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Registration {
  id            String      @id @default(uuid())
  User          User        @relation(fields: [userId], references: [id])
  userId        String
  Application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  Roles         Role[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, applicationId])
}

model Role {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String         @default("")
  Permissions   Permission[]
  Groups        Group[]
  Registrations Registration[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Permission {
  id         String   @id @default(uuid())
  action     String
  subject    String
  fields     Json?
  conditions Json?
  reason     String?
  inverted   Boolean  @default(false)
  Roles      Role[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ApplicationType {
  GENERIC
  NATIVE
  SINGLE_PAGE_APPLICATION
  REGULAR_WEB_APPLICATION
  MACHINE_TO_MACHINE
}

enum JWTSignatureAlgorithm {
  RS256
  HS256
}

model Application {
  id                                String                @id @default(cuid())
  name                              String
  description                       String                @default("")
  applicationType                   ApplicationType
  secret                            String
  applicationLogo                   String                @default("")
  loginURI                          String?
  callbackURLs                      String                @default("")
  logoutURLs                        String                @default("")
  webOrgins                         String                @default("")
  corsOrigins                       String                @default("")
  idTokenExpirationInSecond         Int                   @default(36000)
  refreshTokenRotation              Boolean               @default(true)
  refreshTokenReuseInterval         Int                   @default(0)
  refreshTokenExpirationInSecond    Int                   @default(2592000)
  refreshInactivityExpiration       Boolean               @default(true)
  refreshInactivityLifetimeInSecond Int                   @default(1296000)
  EnabledGrantTypes                 EnabledGrantType[]
  jwtSignatureAlgorithm             JWTSignatureAlgorithm @default(RS256)
  AuthorizationCode                 AuthorizationCode[]
  GrantedScopes                     Scope[]
  RefreshTokens                     RefreshToken[]
  GoogleConnection                  GoogleConnection?     @relation(fields: [googleConnectionId], references: [id])
  googleConnectionId                String?
  FacebookConnection                FacebookConnection?   @relation(fields: [facebookConnectionId], references: [id])
  facebookConnectionId              String?
  Registrations                     Registration[]
  LoginLogs                         LoginLog[]
  createdAt                         DateTime              @default(now())
  updatedAt                         DateTime              @updatedAt
}

enum GrantType {
  IMPLICIT
  AUTHORIZATION_CODE
  REFRESH_TOKEN
  CLIENT_CREDENTIALS
  PASSWORD
  MFA
  PASSWORDLESS_OTP
}

model EnabledGrantType {
  grantType     GrantType
  Application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  createdAt     DateTime    @default(now())

  @@id([applicationId, grantType])
}

model Scope {
  id                String         @id @default(uuid())
  name              String         @unique
  description       String?
  UsingApplications Application[]
  API               API            @relation(fields: [apiId], references: [id])
  apiId             String
  RefreshTokens     RefreshToken[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum ApiTypes {
  SYSTEM_API
  CUSTOM_API
}

model API {
  id        String   @id @default(uuid())
  name      String
  apiTypes  ApiTypes
  Scopes    Scope[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuthorizationCode {
  id             String      @id @default(uuid())
  code           String      @unique @default(cuid())
  expirationDate DateTime
  redirectURI    String
  User           User        @relation(fields: [userId], references: [id])
  userId         String
  Application    Application @relation(fields: [ApplicationId], references: [id])
  ApplicationId  String
  createdAt      DateTime    @default(now())
}

model RefreshToken {
  id             String      @id @default(uuid())
  refreshToken   String      @unique
  expirationDate DateTime
  Scopes         Scope[]
  User           User        @relation(fields: [userId], references: [id])
  userId         String
  Application    Application @relation(fields: [ApplicationId], references: [id])
  ApplicationId  String
  createdAt      DateTime    @default(now())
}

model VerificationCode {
  id             String   @id @default(uuid())
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  code           String
  expirationDate DateTime
  createdAt      DateTime @default(now())

  @@unique([userId, code])
}

model RememberMeToken {
  id        String   @id @default(uuid())
  token     String   @unique
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Group {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  Users       User[]
  Roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SyncUserProfileAttributesAtEachLogin {
  ENABLED
  DISABLED
}

model GoogleConnection {
  id                                   String                               @id @default(uuid())
  clientID                             String                               @default("")
  clientSecret                         String                               @default("")
  allowedMobileClientIDs               String                               @default("")
  scopes                               String
  syncUserProfileAttributesAtEachLogin SyncUserProfileAttributesAtEachLogin @default(ENABLED)
  Applications                         Application[]
  createdAt                            DateTime                             @default(now())
  updatedAt                            DateTime                             @updatedAt
}

model FacebookConnection {
  id                                   String                               @id @default(uuid())
  appId                                String                               @default("")
  appSecret                            String                               @default("")
  scopes                               String
  syncUserProfileAttributesAtEachLogin SyncUserProfileAttributesAtEachLogin @default(ENABLED)
  Applications                         Application[]
  createdAt                            DateTime                             @default(now())
  updatedAt                            DateTime                             @updatedAt
}

model EmailProvider {
  id        String   @id @default(uuid())
  from      String
  host      String
  port      Int
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FailedLoginLog {
  id        String   @id @default(uuid())
  count     Int      @default(1)
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginLog {
  id            String      @id @default(uuid())
  ipAddress     String
  User          User        @relation(fields: [userId], references: [id])
  userId        String
  Application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
