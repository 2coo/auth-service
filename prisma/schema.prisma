// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["transactionApi", "connectOrCreate"]
}

enum SystemRole {
  SUPER_ADMIN
  ADMIN
  DEVELOPER
  USER
}

model SystemUser {
  id        String     @id @default(uuid())
  username  String     @unique
  email     String     @unique
  password  String
  role      SystemRole @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum GrantType {
  AUTHORIZATION_CODE
  PASSWORD
  REFRESH_TOKEN
  CLIENT_CREDENTIALS
  EXTENSION
}

model Organization {
  id          String     @id @default(uuid())
  name        String
  url         String?
  address     String?
  phoneNumber String?
  UserPools   UserPool[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserPool {
  id              String                @id @default(uuid())
  Organization    Organization          @relation(fields: [organizationId], references: [id])
  organizationId  String
  Users           User[]
  Groups          Group[]
  Roles           Role[]
  Clients         oAuthClient[]
  ResourceServers oAuthResourceServer[]
}

model Role {
  id           String             @id @default(uuid())
  name         String
  description  String?
  UserPool     UserPool           @relation(fields: [userPoolId], references: [id])
  userPoolId   String
  Users        User[]
  Groups       Group[]
  Scopes       oAuthScope[]
  CustomScopes oAuthCustomScope[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model oAuthClient {
  id                   String                   @id @default(uuid())
  name                 String                   @unique
  secret               String                   @default(cuid())
  UserPool             UserPool                 @relation(fields: [userPoolId], references: [id])
  userPoolId           String
  Grants               oAuthGrant[]
  RedirectUris         oAuthRedirectURI[]
  JavascriptOrigins    oAuthJavascriptOrigin[]
  Scopes               oAuthScope[]
  AccessTokens         oAuthAccessToken[]
  AuthorizationCodes   oAuthAuthorizationCode[]
  RefreshTokens        oAuthRefreshToken[]
  ResourceServers      oAuthResourceServer[]
  refreshTokenLifetime Int                      @default(43200)
  accessTokenLifetime  Int                      @default(60)
  idTokenLifetime      Int                      @default(5)
  logo                 String
  isTrusted            Boolean                  @default(false)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
}

model oAuthScope {
  id                 String                   @id @default(uuid())
  name               String
  description        String?
  Clients            oAuthClient[]
  AccessTokens       oAuthAccessToken[]
  AuthorizationCodes oAuthAuthorizationCode[]
  RefreshTokenScope  oAuthRefreshToken[]
  Roles              Role[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
}

model oAuthGrant {
  id        String        @id @default(uuid())
  grantType GrantType
  Clients   oAuthClient[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model oAuthRedirectURI {
  id            String      @id @default(uuid())
  Client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  url           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthJavascriptOrigin {
  id            String      @id @default(uuid())
  Client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  uri           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthResourceServer {
  id            String             @id @default(uuid())
  name          String
  identifier    String             @unique
  UserPool      UserPool           @relation(fields: [userPoolId], references: [id])
  userPoolId    String
  Scopes        oAuthCustomScope[]
  Client        oAuthClient        @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model oAuthCustomScope {
  id                    String              @id @default(uuid())
  name                  String
  description           String?
  ResourceServer        oAuthResourceServer @relation(fields: [oAuthResourceServerId], references: [id])
  oAuthResourceServerId String
  Roles                 Role[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model oAuthAccessToken {
  id             String       @id @default(uuid())
  accessToken    String       @default(uuid())
  expirationDate DateTime
  Scopes         oAuthScope[]
  User           User?        @relation(fields: [userId], references: [id])
  userId         String?
  Client         oAuthClient  @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([accessToken, oAuthClientId])
  @@unique([userId, oAuthClientId])
}

model oAuthRefreshToken {
  id             String       @id @default(uuid())
  refreshToken   String       @default(uuid())
  expirationDate DateTime
  Scopes         oAuthScope[]
  User           User?        @relation(fields: [userId], references: [id])
  userId         String?
  Client         oAuthClient  @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([refreshToken, oAuthClientId])
  @@unique([userId, oAuthClientId])
}

model oAuthAuthorizationCode {
  id             String       @id @default(uuid())
  code           String       @default(uuid(16))
  expirationDate DateTime
  redirectURI    String
  Scopes         oAuthScope[]
  User           User         @relation(fields: [userId], references: [id])
  userId         String
  Client         oAuthClient  @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([code, oAuthClientId])
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  UserPool    UserPool @relation(fields: [userPoolId], references: [id])
  userPoolId  String
  Users       User[]
  Roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                 String                   @id @default(uuid())
  sub                String                   @unique @default(uuid())
  username           String                   @unique
  primaryEmail       String
  password           String
  isDisabled         Boolean                  @default(false)
  Profile            Profile
  Groups             Group[]
  PasswordResets     PasswordReset[]
  Roles              Role[]
  Devices            UserDevice[]
  AccessTokens       oAuthAccessToken[]
  AuthorizationCodes oAuthAuthorizationCode[]
  RefreshTokens      oAuthRefreshToken[]
  UserPool           UserPool?                @relation(fields: [userPoolId], references: [id])
  userPoolId         String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
}

model Profile {
  id           String    @id @default(uuid())
  User         User      @relation(fields: [userId], references: [id])
  Emails       Email[]
  userId       String
  firstName    String?   @default("")
  lastName     String?   @default("")
  displayName  String?
  birthdate    DateTime?
  gender       Gender?
  mobileNumber String?
  Photos       Photo[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Email {
  id         String   @id @default(uuid())
  email      String
  isVerified Boolean  @default(false)
  isPrimary  Boolean  @default(false)
  Profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Photo {
  id                    String   @id @default(uuid())
  value                 String
  isCurrentProfileImage Boolean
  Profile               Profile  @relation(fields: [profileId], references: [id])
  profileId             String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model PasswordReset {
  id             String   @id @default(uuid())
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  token          String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserDevice {
  id           String   @id @default(uuid())
  User         User     @relation(fields: [userId], references: [id])
  userId       String
  deviceKey    String
  name         String?
  lastIP       String
  isRemembered Boolean  @default(false)
  SDK          String?
  lastSeen     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
