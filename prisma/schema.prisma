// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["transactionApi", "connectOrCreate"]
}

enum GrantType {
  AUTHORIZATION_CODE
  PASSWORD
  REFRESH_TOKEN
  CLIENT_CREDENTIALS
  EXTENSION
}

model oAuthClient {
  id                   String                   @id @default(uuid())
  name                 String                   @unique
  secret               String                   @default(cuid())
  grants               oAuthClientGrant[]
  redirectUris         oAuthRedirectURI[]
  javascriptOrigins    oAuthJavascriptOrigin[]
  scopes               oAuthClientScope[]
  accessTokens         oAuthAccessToken[]
  authorizationCodes   oAuthAuthorizationCode[]
  refreshTokens        oAuthRefreshToken[]
  users                User[]
  refreshTokenLifetime Int                      @default(43200)
  accessTokenLifetime  Int                      @default(60)
  idTokenLifetime      Int                      @default(5)
  isTrusted            Boolean                  @default(false)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
}

model oAuthScope {
  id                 String                        @id @default(uuid())
  name               String
  description        String?
  clients            oAuthClientScope[]
  accessTokens       oAuthAccessTokenScope[]
  authorizationCodes oAuthAuthorizationCodeScope[]
  refreshTokenScope  oAuthRefreshTokenScope[]
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
}

model oAuthClientScope {
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  scope         oAuthScope  @relation(fields: [oAuthScopeId], references: [id])
  oAuthClientId String
  oAuthScopeId  String
  createdAt     DateTime    @default(now())

  @@id([oAuthClientId, oAuthScopeId])
}

model oAuthClientGrant {
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  grant         oAuthGrant  @relation(fields: [oAuthGrantId], references: [id])
  oAuthClientId String
  oAuthGrantId  String
  createdAt     DateTime    @default(now())

  @@id([oAuthClientId, oAuthGrantId])
}

model oAuthGrant {
  id        String             @id @default(uuid())
  grantType GrantType
  clients   oAuthClientGrant[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model oAuthRedirectURI {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  url           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthJavascriptOrigin {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  uri           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthResourceServer {
  id         String             @id @default(uuid())
  name       String
  identifier String             @unique
  scopes     oAuthCustomScope[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model oAuthCustomScope {
  id                    String              @id @default(uuid())
  name                  String
  description           String?
  resourceServer        oAuthResourceServer @relation(fields: [oAuthResourceServerId], references: [id])
  oAuthResourceServerId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model oAuthAccessTokenScope {
  accessToken        oAuthAccessToken @relation(fields: [oAuthAccessTokenId], references: [id])
  scope              oAuthScope       @relation(fields: [oAuthScopeId], references: [id])
  oAuthAccessTokenId String
  oAuthScopeId       String
  createdAt          DateTime         @default(now())

  @@id([oAuthScopeId, oAuthAccessTokenId])
}

// Authentication

model oAuthAccessToken {
  id             String                  @id @default(uuid())
  accessToken    String                  @default(uuid())
  expirationDate DateTime
  scopes         oAuthAccessTokenScope[]
  user           User?                   @relation(fields: [userId], references: [id])
  userId         String?
  client         oAuthClient             @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@unique([accessToken, oAuthClientId])
  @@unique([userId, oAuthClientId])
}

model oAuthRefreshTokenScope {
  refreshToken        oAuthRefreshToken @relation(fields: [oAuthRefreshTokenId], references: [id])
  scope               oAuthScope        @relation(fields: [oAuthScopeId], references: [id])
  oAuthRefreshTokenId String
  oAuthScopeId        String
  createdAt           DateTime          @default(now())

  @@id([oAuthRefreshTokenId, oAuthScopeId])
}

model oAuthRefreshToken {
  id             String                   @id @default(uuid())
  refreshToken   String                   @default(uuid())
  expirationDate DateTime
  scopes         oAuthRefreshTokenScope[]
  user           User?                    @relation(fields: [userId], references: [id])
  userId         String?
  client         oAuthClient              @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt

  @@unique([refreshToken, oAuthClientId])
  @@unique([userId, oAuthClientId])
}

model oAuthAuthorizationCodeScope {
  authorizationCode        oAuthAuthorizationCode @relation(fields: [oAuthAuthorizationCodeId], references: [id])
  scope                    oAuthScope             @relation(fields: [oAuthScopeId], references: [id])
  oAuthAuthorizationCodeId String
  oAuthScopeId             String
  createdAt                DateTime               @default(now())

  @@id([oAuthAuthorizationCodeId, oAuthScopeId])
}

model oAuthAuthorizationCode {
  id             String                        @id @default(uuid())
  code           String                        @default(uuid(16))
  expirationDate DateTime
  redirectURI    String
  scopes         oAuthAuthorizationCodeScope[]
  user           User                          @relation(fields: [userId], references: [id])
  userId         String
  client         oAuthClient                   @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt

  @@unique([code, oAuthClientId])
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum SystemRole {
  SUPER_ADMIN
  ADMIN
  DEVELOPER
  USER
}

model Group {
  id          String      @id @default(uuid())
  name        String
  description String?
  users       UserGroup[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UserGroup {
  user          User     @relation(fields: [systemUserId], references: [id])
  group         Group    @relation(fields: [systemGroupId], references: [id])
  systemUserId  String
  systemGroupId String
  createdAt     DateTime @default(now())

  @@id([systemUserId, systemGroupId])
}

model User {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  username               String                   @unique @default(cuid())
  email_verified         Boolean                  @default(false)
  email_verified_at      DateTime?
  isDisabled             Boolean                  @default(false)
  profile                Profile
  groups                 UserGroup[]
  password               String
  passwordResets         PasswordReset[]
  role                   SystemRole               @default(USER)
  oAuthAccessToken       oAuthAccessToken[]
  oAuthAuthorizationCode oAuthAuthorizationCode[]
  oAuthRefreshToken      oAuthRefreshToken[]
  devices                UserDevice[]
  oAuthClient            oAuthClient?             @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId          String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model Profile {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  firstName    String?   @default("")
  lastName     String?   @default("")
  displayName  String?
  birthdate    DateTime?
  gender       Gender?
  mobileNumber String?
  image        String?   @default("")
  address1     String?
  address2     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model PasswordReset {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDevice {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  deviceKey    String
  name         String?
  lastIP       String
  isRemembered Boolean  @default(false)
  SDK          String?
  lastSeen     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
