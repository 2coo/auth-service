// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASEURL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["transactionApi", "connectOrCreate", "atomicNumberOperations"]
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum OwnerType {
  CLIENT
  USER
}

enum SystemRole {
    SUPER_ADMIN
    ADMIN
    DEVELOPER
    EMPLOYEE
}

model oAuthScope {
  id                String                  @id @default(uuid())
  scope             String
  description       String
  isDefault         Boolean                 @default(false)
  oAuthGrants       oAuthGrantScope[]
  oAuthClients      oAuthClientScope[]
  oAuthSessions     oAuthSessionScopes[]
  oAuthAuthcodes    oAuthAuthCodeScopes[]
  oAuthAccessTokens oAuthAccessTokenScope[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
}

model oAuthGrant {
  id           String             @id @default(uuid())
  oAuthScopes  oAuthGrantScope[]
  oAuthClients oAuthClientGrant[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model oAuthGrantScope {
  id           String     @id @default(uuid())
  oAuthScope   oAuthScope @relation(fields: [oAuthScopeId], references: [id])
  oAuthScopeId String
  oAuthGrant   oAuthGrant @relation(fields: [oAuthGrantId], references: [id])
  oAuthGrantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model oAuthClient {
  id             String                @id @default(uuid())
  name           String
  secret         String
  oAuthEndpoints oAuthClientEndpoint[]
  oAuthScopes    oAuthClientScope[]
  oAuthGrants    oAuthClientGrant[]
  oAuthSessions  oAuthSession[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model oAuthClientEndpoint {
  id            String      @id @default(uuid())
  oAuthClient   oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  redirectUri   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthClientScope {
  id            String      @id @default(uuid())
  oAuthScope    oAuthScope  @relation(fields: [oAuthScopeId], references: [id])
  oAuthClient   oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthScopeId  String
  oAuthClientId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthClientGrant {
  id            String      @id @default(uuid())
  oAuthGrant    oAuthGrant  @relation(fields: [oAuthGrantId], references: [id])
  oAuthClient   oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  oAuthGrantId  String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthSession {
  id                String               @id @default(uuid())
  oAuthClient       oAuthClient          @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId     String
  ownerType         OwnerType            @default(USER)
  ownerId           String
  clientRedirectUri String
  oAuthScopes       oAuthSessionScopes[]
  oAuthAuthcodes    oAuthAuthCode[]
  oAuthAccessTokens oAuthAccessToken[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model oAuthSessionScopes {
  id             String       @id @default(uuid())
  oAuthSession   oAuthSession @relation(fields: [oAuthSessionId], references: [id])
  oAuthSessionId String
  oAuthScope     oAuthScope   @relation(fields: [oAuthScopeId], references: [id])
  oAuthScopeId   String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model oAuthAuthCode {
  id             String                @id @default(uuid())
  oAuthSession   oAuthSession          @relation(fields: [oAuthSessionId], references: [id])
  redirectUri    String
  expireTime     Int
  oAuthSessionId String
  oAuthScopes    oAuthAuthCodeScopes[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model oAuthAuthCodeScopes {
  id              String        @id @default(uuid())
  oAuthAuthcode   oAuthAuthCode @relation(fields: [oAuthAuthCodeId], references: [id])
  oAuthScope      oAuthScope    @relation(fields: [oAuthScopeId], references: [id])
  oAuthAuthCodeId String
  oAuthScopeId    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model oAuthAccessToken {
  id                 String                  @id @default(uuid())
  oAuthSessionId     String
  oAuthSession       oAuthSession            @relation(fields: [oAuthSessionId], references: [id])
  expireTime         Int
  oAuthScopes        oAuthAccessTokenScope[]
  oAuthRefreshTokens oAuthRefreshToken[]
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
}

model oAuthAccessTokenScope {
  id                 String           @id @default(uuid())
  oAuthAccessToken   oAuthAccessToken @relation(fields: [oAuthAccessTokenId], references: [id])
  oAuthScope         oAuthScope       @relation(fields: [oAuthScopeId], references: [id])
  oAuthAccessTokenId String
  oAuthScopeId       String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model oAuthRefreshToken {
  id                 String           @id @default(uuid())
  oauthAccessToken   oAuthAccessToken @relation(fields: [oAuthAccessTokenId], references: [id])
  oAuthAccessTokenId String
  expireTime         Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  username          String          @unique @default(cuid())
  email_verified    Boolean         @default(false)
  email_verified_at DateTime?
  password          String
  passwordResets    PasswordReset[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Profile {
  id           String    @id @default(uuid())
  firstName    String?   @default("")
  lastName     String?   @default("")
  displayName  String?
  birthdate    DateTime?
  gender       Gender?
  mobileNumber String?
  image        String?   @default("")
  address1     String?
  address2     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model PasswordReset {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
