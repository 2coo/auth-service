// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["transactionApi", "connectOrCreate"]
}

enum GrantType {
  AUTHORIZATION_CODE
  PASSWORD
  REFRESH_TOKEN
  CLIENT_CREDENTIALS
  EXTENSION
}

model oAuthClient {
  id                   String                   @id @default(uuid())
  name                 String                   @unique
  secret               String                   @default(cuid())
  grants               oAuthGrant[]
  redirectUris         oAuthRedirectURI[]
  javascriptOrigins    oAuthJavascriptOrigin[]
  scopes               oAuthScope[]
  accessTokens         oAuthAccessToken[]
  authorizationCodes   oAuthAuthorizationCode[]
  refreshTokens        oAuthRefreshToken[]
  users                User[]
  refreshTokenLifetime Int                      @default(43200)
  accessTokenLifetime  Int                      @default(60)
  idTokenLifetime      Int                      @default(5)
  isTrusted            Boolean                  @default(false)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
}

model oAuthScope {
  id                 String                   @id @default(uuid())
  name               String
  description        String?
  clients            oAuthClient[]
  accessTokens       oAuthAccessToken[]
  authorizationCodes oAuthAuthorizationCode[]
  refreshTokenScope  oAuthRefreshToken[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
}

model oAuthGrant {
  id        String        @id @default(uuid())
  grantType GrantType
  clients   oAuthClient[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model oAuthRedirectURI {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  url           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthJavascriptOrigin {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  uri           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model oAuthResourceServer {
  id         String             @id @default(uuid())
  name       String
  identifier String             @unique
  scopes     oAuthCustomScope[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model oAuthCustomScope {
  id                    String              @id @default(uuid())
  name                  String
  description           String?
  resourceServer        oAuthResourceServer @relation(fields: [oAuthResourceServerId], references: [id])
  oAuthResourceServerId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model oAuthAccessToken {
  id             String       @id @default(uuid())
  accessToken    String       @default(uuid())
  expirationDate DateTime
  scopes         oAuthScope[]
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  client         oAuthClient  @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([accessToken, oAuthClientId])
  @@unique([userId, oAuthClientId])
}

model oAuthRefreshToken {
  id             String       @id @default(uuid())
  refreshToken   String       @default(uuid())
  expirationDate DateTime
  scopes         oAuthScope[]
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  client         oAuthClient  @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([refreshToken, oAuthClientId])
  @@unique([userId, oAuthClientId])
}

model oAuthAuthorizationCode {
  id             String       @id @default(uuid())
  code           String       @default(uuid(16))
  expirationDate DateTime
  redirectURI    String
  scopes         oAuthScope[]
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  client         oAuthClient  @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId  String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([code, oAuthClientId])
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum SystemRole {
  SUPER_ADMIN
  ADMIN
  DEVELOPER
  USER
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                     String                   @id @default(uuid())
  sub                    String                   @unique @default(cuid())
  username               String                   @unique
  email                  String
  password               String
  isDisabled             Boolean                  @default(false)
  profile                Profile
  groups                 Group[]
  passwordResets         PasswordReset[]
  role                   SystemRole               @default(USER)
  devices                UserDevice[]
  oAuthAccessToken       oAuthAccessToken[]
  oAuthAuthorizationCode oAuthAuthorizationCode[]
  oAuthRefreshToken      oAuthRefreshToken[]
  oAuthClient            oAuthClient?             @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId          String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model Profile {
  id                  String    @id @default(uuid())
  user                User      @relation(fields: [userId], references: [id])
  userId              String
  firstName           String?   @default("")
  lastName            String?   @default("")
  displayName         String?
  birthdate           DateTime?
  gender              Gender?
  mobileNumber        String?
  currentProfileImage Photo     @relation("CurrentProfileImage")
  photos              Photo[]   @relation("UserPhotos")
  emails              Email[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model EmailType {
  id        String   @id @default(uuid())
  type      String
  emails    Email[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Email {
  id          String    @id @default(uuid())
  email       String
  emailType   EmailType @relation(fields: [emailTypeId], references: [id])
  emailTypeId String
  profile     Profile   @relation(fields: [profileId], references: [id])
  profileId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Photo {
  id             String   @id @default(uuid())
  value          String
  currentPhotoOf Profile  @relation("CurrentProfileImage")
  profile        Profile  @relation("UserPhotos", fields: [profileId], references: [id])
  profileId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PasswordReset {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  token          String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserDevice {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  deviceKey    String
  name         String?
  lastIP       String
  isRemembered Boolean  @default(false)
  SDK          String?
  lastSeen     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
