// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASEURL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["transactionApi", "connectOrCreate", "atomicNumberOperations"]
}

enum GrantType {
  AUTHORIZATION_CODE
  PASSWORD
  REFRESH_TOKEN
  CLIENT_CREDENTIALS
  EXTENSION
}

model oAuthClient {
  id                String                   @id @default(uuid())
  name              String                   @unique
  secret            String
  grants            oAuthClientGrants[]
  redirectUris      oAuthRedirectURIs[]
  javascriptOrigins oAuthJavascriptOrigins[]
  scopes            oAuthClientScope[]
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
}

model oAuthScope {
  id          String             @id @default(uuid())
  name        String
  description String
  clients     oAuthClientScope[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model oAuthClientScope {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  scope         oAuthScope  @relation(fields: [oAuthScopeId], references: [id])
  oAuthClientId String
  oAuthScopeId  String
}

model oAuthClientGrants {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  grant         oAuthGrant  @relation(fields: [oAuthGrantId], references: [id])
  oAuthClientId String
  oAuthGrantId  String
}

model oAuthGrant {
  id        String              @id @default(uuid())
  grantType GrantType
  clients   oAuthClientGrants[]
}

model oAuthRedirectURIs {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  url           String
}

model oAuthJavascriptOrigins {
  id            String      @id @default(uuid())
  client        oAuthClient @relation(fields: [oAuthClientId], references: [id])
  oAuthClientId String
  uri           String
}

model oAuthResourceServer {
  id         String             @id @default(uuid())
  name       String
  identifier String             @unique
  scopes     oAuthCustomScope[]
}

model oAuthCustomScope {
  id                    String              @id @default(uuid())
  name                  String
  description           String?
  resourceServer        oAuthResourceServer @relation(fields: [oAuthResourceServerId], references: [id])
  oAuthResourceServerId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum SystemRole {
  SUPER_ADMIN
  ADMIN
  DEVELOPER
  EMPLOYEE
}

model Group {
  id          String       @id @default(uuid())
  name        String
  description String
  users       UserGroups[]
}

model UserGroups {
  id            String @id @default(uuid())
  user          User   @relation(fields: [systemUserId], references: [id])
  group         Group  @relation(fields: [systemGroupId], references: [id])
  systemUserId  String
  systemGroupId String
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  username          String          @unique @default(cuid())
  email_verified    Boolean         @default(false)
  email_verified_at DateTime?
  groups            UserGroups[]
  password          String
  passwordResets    PasswordReset[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Profile {
  id           String    @id @default(uuid())
  firstName    String?   @default("")
  lastName     String?   @default("")
  displayName  String?
  birthdate    DateTime?
  gender       Gender?
  mobileNumber String?
  image        String?   @default("")
  address1     String?
  address2     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model PasswordReset {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
